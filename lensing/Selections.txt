
Selections in the codes themselves.  We will also select good lensing
measurements later.
---------------------------------------------------------------------------

Summary Table

                      regauss        photoz
                  
resolve                 Y              Y
object1_flags           Y              Y
objc bdb                Y              Y 
binned ri               Y              Y
calib                   Y              N
cmodel r               22          21.5/21.8
model all               N           [15,29]


in the regauss sweep code:

    resolve

    tycho mask

    flag logic
        binned_logic = self.binned_logic()
            binned1 = self.flags.val('object1','binned1')
            binned2 = self.flags.val('object1','binned2')
            binned4 = self.flags.val('object1','binned4')

            rflags = self.objs['flags'][:,2]
            iflags = self.objs['flags'][:,3]

            r_binned_logic = \
                ((rflags & binned1) != 0 )  \
                | ((rflags & binned2) != 0 )  \
                | ((rflags & binned4) != 0 )

            i_binned_logic = \
                ((iflags & binned1) != 0 )  \
                | ((iflags & binned2) != 0 )  \
                | ((iflags & binned4) != 0 )

            return r_binned_logic & i_binned_logic

        # make sure no non-photometric data
        calib_logic = self.calib_logic()
            calib_status = objs['calib_status']
            flagval = self.flags.val('calib_status', 'photometric')
            logic = \
                ((calib_status[:,0] & flagval) != 0)   \
                & ((calib_status[:,1] & flagval) != 0) \
                & ((calib_status[:,2] & flagval) != 0) \
                & ((calib_status[:,3] & flagval) != 0) \
                & ((calib_status[:,4] & flagval) != 0)


        # checking lots of object1 flags
        object1_logic = self.object1_logic()
            satur = self.flags.val('object1','satur')
            bright = self.flags.val('object1','bright')
            too_many_peaks = self.flags.val('object1','deblend_too_many_peaks')

            blended = self.flags.val('object1','blended')
            nodeblend = self.flags.val('object1','nodeblend')

            peakcenter = self.flags.val('object1','peakcenter')
            notchecked = self.flags.val('object1','notchecked')
            noprofile = self.flags.val('object1','noprofile')

            oflags = self.objs['objc_flags']

            # famously worded as double negatives
            bdb_logic = \
                ( (oflags & blended) == 0) | ((oflags & nodeblend) != 0)

            # now combine logic
            logic = \
                ((oflags & satur) == 0) \
                & ((oflags & bright) == 0) \
                & ((oflags & too_many_peaks) == 0) \
                & ((oflags & peakcenter) == 0) \
                & ((oflags & notchecked) == 0) \
                & ((oflags & noprofile) == 0) \
                & bdb_logic



        # combined logic
        logic = binned_logic & calib_logic & object1_logic

    magnitudes cmodel r < 22
        rmag_logic = s.cmodelmag_logic("r", self.rmax)


In the zphot selection code

    binned_logic = sdssgal.binned_logic_ri(flags)
            binned1 = sdsspy.flagval('object1','binned1')
            binned2 = sdsspy.flagval('object1','binned2')
            binned4 = sdsspy.flagval('object1','binned4')

            rflags = flags[:,2]
            iflags = flags[:,3]

            r_binned_logic = \
                ((rflags & binned1) != 0 )  \
                | ((rflags & binned2) != 0 )  \
                | ((rflags & binned4) != 0 )

            i_binned_logic = \
                ((iflags & binned1) != 0 )  \
                | ((iflags & binned2) != 0 )  \
                | ((iflags & binned4) != 0 )

            return r_binned_logic & i_binned_logic


    objc_flags1_logic = sdssgal.object1_logic(objc_flags)
            satur = sdsspy.flagval('object1','satur')
            bright = sdsspy.flagval('object1','bright')
            too_many_peaks = sdsspy.flagval('object1','deblend_too_many_peaks')

            blended = sdsspy.flagval('object1','blended')
            nodeblend = sdsspy.flagval('object1','nodeblend')

            peakcenter = sdsspy.flagval('object1','peakcenter')
            notchecked = sdsspy.flagval('object1','notchecked')
            noprofile = sdsspy.flagval('object1','noprofile')


            # famously worded as double negatives
            bdb_logic = \
                ( (objc_flags & blended) == 0) | ((objc_flags & nodeblend) != 0)

            # now combine logic
            logic = \
                ((objc_flags & satur) == 0) \
                & ((objc_flags & bright) == 0) \
                & ((objc_flags & too_many_peaks) == 0) \
                & ((objc_flags & peakcenter) == 0) \
                & ((objc_flags & notchecked) == 0) \
                & ((objc_flags & noprofile) == 0) \
                & bdb_logic

    model mag logic [15,29] in all bands
        # always do model mag logic
        mmin = self.conf['modelmag_min']
        mmax = self.conf['modelmag_max']

        stdout.write("Cutting to reasonable model mags: [%s,%s]\n" \
                     % (mmin,mmax))
        stdout.write("Reading modelmag_dered\n")
        mag = c['modelmag_dered'][:]
        stdout.write('Getting mag logic\n')
        mag_logic = \
                  (mag[:,0] > mmin) & (mag[:,0] < mmax) \
                & (mag[:,1] > mmin) & (mag[:,1] < mmax) \
                & (mag[:,2] > mmin) & (mag[:,2] < mmax) \
                & (mag[:,3] > mmin) & (mag[:,3] < mmax) \
                & (mag[:,4] > mmin) & (mag[:,4] < mmax)
        w,=where(mag_logic)
        stdout.write("    %s/%s passed\n" % (w.size,c['flags'].size))
        del mag

        logic = logic & mag_logic


    cmodel_mag logic, [15,21.8] in r extinction corrected
        cmag_logic = (cmag[:,2] > rmin) & (cmag[:,2] < rmax)
        w,=where(cmag_logic)

        logic = logic & cmag_logic


    tycho mask



