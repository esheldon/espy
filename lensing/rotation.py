"""
These files were actually generated by the IDL code.
"""

from __future__ import print_function
import os
import esutil as eu
from esutil.ostools import path_join
from esutil.numpy_util import where1
import numpy
from numpy import pi as PI

import lensing


def read_rotfile(run, type='eq'):
    f = rotfile(run, type)
    if not os.path.exists(f):
        raise ValueError("Rotation file not found: %s" % f)
    print("Reading rotation:",f)
    return eu.io.read(f, lower=True)

def rotfile(run, type='eq'):
    d = rotdir(type)
    f = '%srot-%06i-301.fits' % (type, run)
    f = path_join(d, f)
    return f
def rotdir(type='eq'):
    d=os.environ['LENSDIR']
    d = path_join(d, 'sdss-shape-rot', type)
    return d

class Rotator:
    def __init__(self, type='eq'):
        self.type=type
        self.current_run=None
    
    def load_run(self, run):
        if self.current_run != run:
            self.rotstruct = read_rotfile(run, self.type)
            self.current_run = run

    def rotate_e1e2(self, run, camcol, field, filternum, e1pix, e2pix, kludge=False):
        self.load_run(run)

        w=where1((self.rotstruct['camcol'] == camcol) & (self.rotstruct['field'] == field) )
        if w.size != 1:
            print("expected single match for %06i-%i-%04i, got %i" % (run,camcol,field,w.size))
            fields = numpy.unique(self.rotstruct['field'])
            print("here are the fields:",fields)
            raise ValueError("stopping")

        if not kludge:
            cos2angle = self.rotstruct['cos2angle'][w,filternum]
            sin2angle = self.rotstruct['sin2angle'][w,filternum]
        else:
            angle = self.rotstruct['angle'][w,filternum]
            #angle = numpy.pi/2. - angle
            #angle = angle - numpy.pi/2.
            #angle = - angle
            cos2angle = numpy.cos(2.*angle)
            sin2angle = numpy.sin(2.*angle)

        # note we also need to flip the coordinate system across the 45 degree
        # line for equatorial
        if self.type eq 'eq':
            e1pix *= -1

        e1 =  e1pix*cos2angle + e2pix*sin2angle
        e2 = -e1pix*sin2angle + e2pix*cos2angle

        return e1,e2

def make_rotation_test_data(run=3910, camcol=3, field=100):
    c=lensing.regauss.open_columns('04')
    # note logic returns indices for Columns columns!
    w=c['run'] == run
    if w.size == 0:
        raise ValueError("no objects found for run %d" % run)
    
    flags = c['corrflags_rg_r'][w]
    camcols = c['camcol'][w]
    fields = c['field'][w]
    w2=where1((camcols == camcol) & (flags == 0) & (fields==field))
    if w2.size == 0:
        raise ValueError("not objects in camcol %s with flags==0" % camcol)
    w=w[w2]

    data = c.read_columns(['ra','dec','field','e1_rg_r','e2_rg_r'], rows=w)

    output = numpy.zeros(data.size, 
                          dtype=[('ra','f8'),('dec','f8'),
                                 ('g1eq','f8'),('g2eq','f8'),
                                 ('clambda','f8'),('ceta','f8'),
                                 ('g1survey','f8'),('g2survey','f8')])

    output['ra'] = data['ra']
    output['dec'] = data['dec']

    lam, eta = eu.coords.eq2sdss(data['ra'],data['dec'])
    output['clambda'] =  lam
    output['ceta'] = eta

    eq_rotator = Rotator('eq')
    survey_rotator = Rotator('survey')

    for field in xrange(data['field'].min(), 1+data['field'].max()):
        w=where1(data['field'] == field)
        print("field:",field,"nobj:",w.size)
        if w.size > 0:
            e1eq, e2eq = eq_rotator.rotate_e1e2(run,camcol,field,2,
                                                data['e1_rg_r'][w],data['e2_rg_r'][w])
            e1surv, e2surv = survey_rotator.rotate_e1e2(run,camcol,field,2,
                                                        data['e1_rg_r'][w],data['e2_rg_r'][w])

            output['g1eq'][w] = e1eq/2
            output['g2eq'][w] = e2eq/2
            output['g1survey'][w] = e1surv/2
            output['g2survey'][w] = e2surv/2

    output_file=os.path.expanduser('~/tmp/test-rot/test-rot.rec')
    print("writing output file:",output_file)
    fobj = open(output_file,'w')
    num = numpy.array([output.size], dtype='i8')
    num.tofile(fobj)
    #robj = eu.recfile.Recfile(output_file, 'w', delim=' ')
    robj = eu.recfile.Recfile(fobj, 'r+')
    robj.write(output)
    robj.close()



class TestRotation(dict):

    def compare(self, run):
        import biggles
        import pcolors

        pdata, mdata = self.load_data(run)
        if len(pdata) == 0:
            print("no princeton data found")
            return
        if len(mdata) == 0:
            print("no my data found")
            return

        tab = biggles.Table(2,1)

        pplt = biggles.FramedPlot()
        mplt = biggles.FramedPlot()

        pplots=[]
        mplots=[]

        colors=pcolors.rainbow(6, 'hex')

        for camcol in xrange(1,6):
            # first princeton
            wp = where1(pdata['camcol'] == camcol)

            b = eu.stat.Binner(pdata['field'][wp], pdata['phi_offset'][wp])
            b.dohist(binsize=1.0)
            b.calc_stats()

            wgood = where1(b['hist'] > 0)
            p = biggles.Curve(b['xmean'][wgood],b['ymean'][wgood], color=colors[camcol-1])
            p.label = 'princ camcol %s' % camcol

            pplt.add(p)
            pplots.append(p)

            # now mine
            wm = where1(mdata['camcol'] == camcol)
            mp = biggles.Curve(mdata['field'][wm], PI/2.-mdata['angle'][wm,2], color=colors[camcol-1])
            mp.label = 'pi/2-mine camcol %s' % camcol
            mplt.add(mp)
            mplots.append(mp)

        # princeton stuff
        pkey = biggles.PlotKey(0.1,0.9,pplots)
        pplt.add(pkey)

        pplt.xlabel = 'Field'
        pplt.title = 'Run: %s' % run
        pplt.ylabel = 'angle'

        tab[0,0] = pplt

        # my stuff
        mkey = biggles.PlotKey(0.1,0.9,mplots)
        mplt.add(mkey)

        mplt.xlabel = 'Field'
        mplt.title = 'Run: %s' % run
        mplt.ylabel = 'angle'

        tab[1,0] = mplt


        tab.show()
            

    def load_data(self, run):
        import pgnumpy
        print("loading princeton data")
        query="""
        select 
            run,
            camcol,
            field,
            phi_offset
        from 
            scat_princeton
        where 
            run = {run}
        """.format(run=run)
        print(query)

        pg=pgnumpy.PgNumpy()
        princeton_data = pg.fetchall(query)


        print("loading my rotation struct")
        mydata = read_rotfile(run)

        return princeton_data, mydata
