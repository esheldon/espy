#!/usr/bin/env python
"""
    %prog [options] run gnum

combine outputs
"""

from __future__ import print_function

import os,sys
import numpy
import fitsio
import esutil as eu

from great_des import files

from optparse import OptionParser
parser = OptionParser(__doc__)

def read_output(**conf):
    data0 = files.read_output(**conf)

    add_dt=[('fnum','i4'),
            ('shear_true','f8',2),
            ('psf_true_e','f8',2),
            ('fwhm_true','f4'),
            ('flux_true','f8'),
            ('s2n_true','f8'),
            ('id_shear','i8'),
            ('id_psf','i8'),
            ('true_e','f4',2),
            ('true_hlr','f4')]



    data=eu.numpy_util.add_fields(data0, add_dt)

    return data

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 2:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    gnum=int(args[1])

    conf=files.read_config(run=run)

    conf['gnum'] = gnum

    d = files.get_collated_dir(**conf)
    if not os.path.exists(d):
        os.makedirs(d)
    collated_file = files.get_collated_file(**conf)
    print(collated_file)



    first=True
    with fitsio.FITS(collated_file,'rw',clobber=True) as fobj:
        for fnum in xrange(conf['nf']):
            conf['fnum'] = fnum

            truth_file=files.get_input_file(ftype='truth', **conf)
            print(truth_file)
            truth_data=fitsio.read(truth_file)

            if 'shape_e1' in truth_data.dtype.names:
                add_true_e=True
            else:
                add_true_e=False

            low,high = files.get_chunk_ranges(**conf)
            n=len(low)

            dlist=[]
            for i in xrange(n):
                conf['start'] = low[i]
                conf['end'] = high[i]

                #data0 = files.read_output(**conf)
                #data=eu.numpy_util.add_fields(data0, [('shear_true','f8',2)])

                data=read_output(**conf)
                tbeg=low[i]
                tend=high[i]+1

                test=numpy.all(data['number'][:] == truth_data['id'][tbeg:tend])
                if not test:
                    print("ids do not match")
                    w,=numpy.where(data['number'] != truth_data['id'][tbeg:tend])
                    for ibad in w:
                        print(data['number'][ibad],truth_data['id'][tbeg + ibad])
                    stop

                data['fnum'] = fnum
                data['shear_true'][:,0] = truth_data['g1_true'][tbeg:tend]
                data['shear_true'][:,1] = truth_data['g2_true'][tbeg:tend]
                data['psf_true_e'][:,0] = truth_data['psf_e1'][tbeg:tend]
                data['psf_true_e'][:,1] = truth_data['psf_e2'][tbeg:tend]
                data['fwhm_true'] = truth_data['fwhm'][tbeg:tend]
                data['flux_true'][:] = truth_data['flux'][tbeg:tend]
                data['s2n_true'][:] = truth_data['snr'][tbeg:tend]

                data['id_shear'] = truth_data['id_shear'][tbeg:tend]
                data['id_psf'] = truth_data['id_psf'][tbeg:tend]

                if add_true_e:
                    data['true_e'][:,0] = truth_data['shape_e1'][tbeg:tend]
                    data['true_e'][:,1] = truth_data['shape_e2'][tbeg:tend]
                    data['true_hlr'] = truth_data['sersic_hlr'][tbeg:tend]


                nexpect=(high[i]-low[i])+1
                if data.size != nexpect:
                    err="data size mismatch: expected %d got %d"
                    raise IOError(err % (nexpect,data.size))


                if first:
                    fobj.write(data)
                    first=False
                else:
                    fobj[-1].append(data)

    print(collated_file)

main()
