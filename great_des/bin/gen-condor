#!/usr/bin/env python
"""
Geneate the condor files
"""
from __future__ import print_function
import os,sys
from sys import stderr

import great_des
from great_des import files

from argparse import ArgumentParser
parser = ArgumentParser(__doc__)

parser.add_argument('run',help="great des run identifier")
parser.add_argument('--gvals',help="g values to process, csv")
parser.add_argument('--missing',action='store_true',
                    help="only write jobs for missing files")


_master_template="""#!/bin/bash
function run_fit {
    echo "host: $(hostname)"
    echo "will write to file: $output"

    $ESPY_DIR/great_des/bin/fit-great-des \\
        --work-dir=$tmpdir                \\
        --obj-range ${start},${end}       \\
        ${config_file}                    \\
        ${meds_file}                      \\
        ${truth_file}                     \\
        ${psf_file}                       \\
        ${output_file}

    status=$?

    echo "time: $SECONDS"

    if [[ $status != "0" ]]; then
        echo "error running great des: $status"
    fi

    return $status
}

meds_file=$1
truth_file=$2
psf_file=$3
output_file=$4
start=$5
end=$6

config_file="%(config_file)s"

logfile=${output_file}.log

# temporary log file, to be transferred later
if [[ -n $_CONDOR_SCRATCH_DIR ]]; then
    tmpdir=$_CONDOR_SCRATCH_DIR
else
    tmpdir=$TMPDIR
fi

cd $tmpdir

tmplog=$(basename $logfile)

run_fit &> ${tmplog}
status=$?

echo "moving log file ${tmplog} -> ${logfile}" >> ${tmplog}

# errors go to the jobs stderr
mv -fv "${tmplog}" "${logfile}" 1>&2
status2=$?

if [[ $status2 != "0" ]]; then
    # this error message will go to main error file
    echo "error ${status2} moving log to: ${logfile}" 1>&2

    status=$status2
fi

exit $status
"""

_condor_template_head="""
Universe        = vanilla

Notification    = Never 

# Run this exe with these args
Executable      = %(master_script)s


# Estimate of init. image size.  This is actually high
# condor always raises it to 60-90 Meg
Image_Size      = %(image_size)s

# we need this or nothing works
GetEnv = True

kill_sig        = SIGINT

+Experiment     = "astro"
"""

_queue_template="""
+job_name       = "%(job_name)s"
Arguments       = %(meds_file)s %(truth_file)s %(psf_file)s %(output_file)s %(start)s %(end)s
Queue
"""


class CondorMaker(object):
    def __init__(self, run, missing=False):
        self.run=run
        self.missing=missing

        self.conf=great_des.files.read_config(run=run)
        self.config_file=great_des.files.get_config_file(run=run)

        self.master_file=great_des.files.get_condor_master(run=run)
        self.image_size=1000000

        self.condor_template_head = _condor_template_head % {'master_script':self.master_file,
                                                             'image_size':self.image_size}

        self.jobs_per_file=1000

        self.make_output_dirs()

    def make_master(self):
        print("writing:",self.master_file)
        with open(self.master_file,'w') as fobj:
            text=_master_template % {'config_file': self.config_file}
            fobj.write(text)
        
        os.system('chmod 755 %s' % self.master_file)

    def make_condor(self, gvals=None):

        conf=self.conf
        gdrun=conf['gdrun']
        ng=conf['ng']
        nf=conf['nf']
        nper=conf['nper']

        filenum=0
        job_count=0
        this_job_count=0
        start_new_file=True
        fobj=None

        if gvals is None:
            gvals = list(range(ng))

        ngvals_use=len(gvals)
        print("processing gvals:",gvals)

        for ignum,gnum in enumerate(gvals):
            print("    gnum: %d  %d/%d" % (gnum,ignum+1,ngvals_use))
            for fnum in xrange(nf):
                if (fnum % 10) == 0:
                    print("        fnum: %d/%d" % (fnum+1,nf))

                #print("gnum:",gnum,"fnum:",fnum)
                low,high = files.get_chunk_ranges(gdrun=gdrun,
                                                  fnum=fnum,
                                                  gnum=gnum,
                                                  nper=nper)

                nr = len(low)
                for i in xrange(nr):

                    if fobj is None or this_job_count==self.jobs_per_file:

                        if fobj is not None:
                            fobj.close()
                            filenum += 1

                        condor_file=great_des.files.get_condor_file(filenum=filenum,
                                                                    missing=self.missing,
                                                                    **conf)
                        print(condor_file)

                        fobj=open(condor_file,'w')
                        fobj.write(self.condor_template_head)
                        this_job_count = 0


                    start=low[i]
                    end=high[i]

                    text,output_file=self.get_text(fnum=fnum,
                                                   gnum=gnum,
                                                   start=start,
                                                   end=end)
                    if self.missing:
                        if os.path.exists(output_file):
                            continue

                    fobj.write(text)

                    job_count += 1
                    this_job_count += 1

        print("total jobs:",job_count)

    def get_text(self, **keys):

        keys.update( self.conf )
        keys['meds_file']=files.get_input_file(ftype="meds", **keys)
        keys['truth_file']=files.get_input_file(ftype="truth", **keys)
        keys['psf_file']=files.get_psf_file(**keys)
        keys['output_file'] = files.get_output_file(**keys)

        keys['job_name']='%(run)s-%(fnum)03i-g%(gnum)02i-%(start)05d-%(end)05d' % keys

        text = _queue_template % keys

        return text, keys['output_file']

    def make_output_dirs(self):
        condor_dir=files.get_condor_dir(run=self.run)
        output_dir = files.get_output_dir(run=self.run)

        for dir in [condor_dir,output_dir]:
            if not os.path.exists( dir ):
                print('making dir:',dir)
                os.makedirs(dir)

def main():
    args = parser.parse_args()

    gvals=args.gvals
    if gvals is not None:
        gvals=[int(g) for g in gvals.split(',')]

    cm = CondorMaker(args.run, missing=args.missing)
    cm.make_condor(gvals=gvals)
    cm.make_master()

main()
