#!/usr/bin/env python
"""
plot dsig for the input run and binning scheme

Note jack also implies corr
"""
from __future__ import print_function
import os,sys
import des
from des import files
from des.files import replace_rrun
import argparse
import numpy
import esutil as eu
import biggles

from esutil.stat import wmom
from esutil.numpy_util import between

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("run", help="run identifier")
parser.add_argument("rrun", help="run identifier")
parser.add_argument("bin_scheme", help="bin scheme, e.g. bin-lgt05-zwide")

parser.add_argument("type", 
                    help="type to plot",
                    choices=['binned', 'jack', 'corr-binned', 'corr-jack'])

parser.add_argument("-v","--visible",action='store_true',
                    help="show plot on screen")

parser.add_argument("-y","--yrange",
                    default=None,
                    help="force y range")

parser.add_argument("--title",
                    default=None,
                    help="add a title")

parser.add_argument("--fmin",
                    default=None,
                    type=float,
                    help="min fontsize")

parser.add_argument("--labels",
                    default=None,
                    help="labels for each run, default run name")



def get_data(args):

    trrun = replace_rrun(args.rrun)
    combrun='%s-%s' % (args.run, trrun)

    # currently rand are always jackknifed if the jackreg_col is set
    # in the config file
    rdata=files.read_match_binned(args.run, args.rrun, args.bin_scheme)

    if args.type=='binned':
        data=files.read_binned(args.run, args.bin_scheme)
        epsfile=files.get_binned_file(combrun, args.bin_scheme, ext='eps')
    elif args.type=='jack':
        data=files.read_jack(args.run, args.bin_scheme)
        epsfile=files.get_jack_file(combrun, args.bin_scheme, ext='eps')

    epsfile=epsfile.replace('.eps','-compare.eps')
    return data, rdata, epsfile

def makedir(epsfile):
    d=os.path.dirname(epsfile)
    if not os.path.exists(d):
        try:
            os.makedirs(d)
        except:
            pass

def get_yrange(data, rdata):
    ymin = min((data['dsig']-data['dsigerr']).min(),
               (rdata['dsig']-rdata['dsigerr']).min())
    ymax = max((data['dsig']+data['dsigerr']).max(),
               (rdata['dsig']+rdata['dsigerr']).max())

    return [ymin, ymax]
def main():
    args = parser.parse_args()

    data, rdata, epsfile = get_data(args)

    yrange=args.yrange
    if yrange is not None:
        yrange=[float(v) for v in args.yrange.split(',')]
    else:
        yrange=get_yrange(data,rdata)

    binspec=des.files.read_config(args.bin_scheme)
    labels=[bi['label'] for bi in binspec['bin_info']]

    kw={}
    if args.fmin is not None:
        kw['fontsize_min']=args.fmin

    xrng=[0.5*min(data['r'].min(),rdata['r'].min()),
          1.5*max(data['r'].max(),rdata['r'].max())]
    yrng=[0.5*min(data['r'].min(),rdata['r'].min()),
          1.5*max(data['r'].max(),rdata['r'].max())]


    colors=['black','red']
    symbols=['filled circle','filled diamond']
    arr=des.plotting.plot_dsig(data['r'],
                               data['dsig'],
                               data['dsigerr'],
                               labels=labels,
                               ylog=False,
                               yrange=yrange,
                               title=args.title,
                               visible=False,
                               color=colors[0],
                               type=symbols[0],
                               xrange=xrng,
                               **kw)

    des.plotting.plot_dsig(rdata['r'],
                           rdata['dsig'],
                           rdata['dsigerr'],
                           labels=labels,
                           ylog=False,
                           yrange=yrange,
                           title=args.title,
                           visible=False,
                           color=colors[1],
                           type=symbols[1],
                           xrange=xrng,
                           arr=arr,
                           **kw)


    if args.labels is not None:
        labels=[l for l in args.labels.split(',')]
    else:
        labels=['lenses','random']

    p1,p2=eu.plotting.fake_points(symbols,
                                  labels,
                                  colors=colors)

    key=biggles.PlotKey(0.9, 0.9, [p1,p2], halign='right')
    arr[0,0].add(key)

    makedir(epsfile)
    print("writing:",epsfile)
    arr.write_eps(epsfile)

    if args.visible:
        arr.show()


main()
