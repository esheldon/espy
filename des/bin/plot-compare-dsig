#!/usr/bin/env python
"""
plot dsig for the input run and binning scheme

Note jack also implies corr
"""
from __future__ import print_function
import os,sys
import des
import argparse
import numpy
import esutil as eu
import biggles

from esutil.stat import wmom
from esutil.numpy_util import between

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("run1", help="run identifier")
parser.add_argument("run2", help="run identifier")
parser.add_argument("bin_scheme", help="bin scheme, e.g. bin-lgt05-zwide")

parser.add_argument("type", 
                    help="type to plot",
                    choices=['binned', 'jack', 'corr-binned', 'corr-jack'])

parser.add_argument("-v","--visible",action='store_true',
                    help="show plot on screen")

parser.add_argument("--linear",action='store_true',
                    help="use linear y axis")

parser.add_argument("-y","--yrange",
                    default=None,
                    help="force y range")

parser.add_argument("--title",
                    default=None,
                    help="add a title")

parser.add_argument("--fmin",
                    default=None,
                    type=float,
                    help="min fontsize")

parser.add_argument("--radrange",
                    default=None,
                    help="rad range for averaging ratio")

parser.add_argument("--labels",
                    default=None,
                    help="labels for each run, default run name")



def get_data(args):
    from des import files

    combrun='%s-%s' % (args.run1, args.run2.replace('run-',''))
    if args.type=='binned':
        data1=files.read_binned(args.run1, args.bin_scheme)
        data2=files.read_binned(args.run2, args.bin_scheme)
        epsfile=files.get_binned_file(combrun, args.bin_scheme, ext='eps')
    elif args.type=='jack':
        data1=files.read_jack(args.run1, args.bin_scheme)
        data2=files.read_jack(args.run2, args.bin_scheme)
        epsfile=files.get_jack_file(combrun, args.bin_scheme, ext='eps')

    epsfile_rat=epsfile.replace('.eps','-ratio.eps')
    return data1, data2, epsfile, epsfile_rat

def makedir(epsfile):
    d=os.path.dirname(epsfile)
    if not os.path.exists(d):
        try:
            os.makedirs(d)
        except:
            pass


def get_ratio_mean(r, rat, raterr, radrange):

    if radrange is not None:
        radrange = [float(t) for t in radrange.split(',')]

    nbin = rat.shape[0]

    for i in xrange(nbin):
        if radrange is None:
            rmin=r[i,:].min()
            rmax=r[i,:].max()
            w=numpy.arange(rat.shape[0])
        else:
            rmin,rmax=radrange
            w,=numpy.where( between(r[i,:], rmin, rmax) )

        wts = 1.0/raterr[i,w]**2
        mn,err=wmom(rat[i,w], wts)

        print("%d ratio over [%g,%g]: %g +/- %g" % (i, rmin, rmax, mn, err))

def main():
    args = parser.parse_args()

    data1, data2, epsfile, epsfile_rat = get_data(args)

    yrange=args.yrange
    if yrange is not None:
        yrange=[float(v) for v in args.yrange.split(',')]

    binspec=des.files.read_config(args.bin_scheme)
    labels=[bi['label'] for bi in binspec['bin_info']]

    kw={}
    if args.fmin is not None:
        kw['fontsize_min']=args.fmin

    xrng=[0.5*min(data1['r'].min(),data2['r'].min()),
          1.5*max(data1['r'].max(),data2['r'].max())]

    arr=des.plotting.plot_dsig(data1['r'],
                               data1['dsig'],
                               data1['dsigerr'],
                               labels=labels,
                               ylog=(args.linear==False),
                               yrange=yrange,
                               title=args.title,
                               visible=False,
                               color='red',
                               xrange=xrng,
                               **kw)

    des.plotting.plot_dsig(data2['r'],
                           data2['dsig'],
                           data2['dsigerr'],
                           labels=labels,
                           ylog=(args.linear==False),
                           yrange=yrange,
                           title=args.title,
                           visible=False,
                           color='blue',
                           xrange=xrng,
                           arr=arr,
                           **kw)

    if args.labels is not None:
        labels=[l for l in args.labels.split(',')]
    else:
        labels=[args.run1, args.run2]
        labels=[l.replace('run-','') for l in labels]

    p1,p2=eu.plotting.fake_filled_circles(labels, colors=['red','blue'])

    key=biggles.PlotKey(0.9, 0.9, [p1,p2], halign='right')
    arr[0,0].add(key)

    makedir(epsfile)
    print("writing:",epsfile)
    arr.write_eps(epsfile)



    if args.visible:
        arr.show()

    if data1['dsig'].size == data2['dsig'].size:
        rat = data1['dsig']/data2['dsig']
        raterr = rat*numpy.sqrt(  (data1['dsigerr']/data1['dsig'])**2
                                + (data2['dsigerr']/data2['dsig'])**2 )

        get_ratio_mean(data1['r'], rat, raterr, args.radrange)
        rarr=des.plotting.plot_dsig(data1['r'],
                                    rat,
                                    raterr,
                                    labels=labels,
                                    ylog=False,
                                    title=args.title,
                                    visible=False,
                                    lineval=1,
                                    **kw)

        print("writing:",epsfile_rat)
        rarr.write_eps(epsfile_rat)
        if args.visible:
            rarr.show()
    else:
        print("runs have different number of bins, not doing ratio")


main()
