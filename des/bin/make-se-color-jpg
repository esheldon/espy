#!/usr/bin/env python
"""
    %prog [options] gfits rfits ifits outfile

Only works for g,r,i images that overlap well
"""

import sys
import os
import glob
import esutil as eu
from esutil import wcsutil
from numpy import array, zeros, flipud
from PIL import Image
import images

import des
import fitsio

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('-r','--rebin',default=None,
                  help="rebin factor")
parser.add_option('-c','--clobber',action='store_true',
                  help="write files even if they already exist")


def shift_image(image, shift):
    """
    Shift the image

    bi-linear interpolation is used

    parameters
    ----------
    shift: sequence[2]
        shift in row,column directions.  Can be non-integer

    outputs
    -------
    the shifted image

    dependencies
    ------------
    scipy.ndimage
    """
    import scipy.ndimage

    output = scipy.ndimage.interpolation.shift(image, shift, 
                                               output='f4',
                                               order=1,
                                               mode='constant',
                                               cval=0.0)

    return output


def shift_images(gh, rh, ih, img, imi):
    gwcs=eu.wcsutil.WCS(gh)
    rwcs=eu.wcsutil.WCS(rh)
    iwcs=eu.wcsutil.WCS(ih)

    rowcen_r,colcen_r=img.shape[0]/2., img.shape[1]/2.

    racen_r,deccen_r = rwcs.image2sky(colcen_r, rowcen_r)

    print '(ra,dec) center:',racen_r,deccen_r

    # now see where that falls in the g and i images
    gcol,grow=gwcs.sky2image(racen_r, deccen_r)
    icol,irow=iwcs.sky2image(racen_r, deccen_r)

    gshift=[rowcen_r-grow, colcen_r-gcol]
    ishift=[rowcen_r-irow, colcen_r-icol]
    #gshift=[grow-rowcen_r, gcol-colcen_r]
    #ishift=[irow-rowcen_r, icol-colcen_r]

    g = shift_image(img, gshift)
    i = shift_image(imi, ishift)

    return g,i

def flip_transpose(im):
    return flipud(im).transpose()


def make_dir(fname):
    dname=os.path.dirname(fname)
    if not os.path.exists(dname):
        print 'making dirs:',dname
        os.makedirs(dname)

def do_rebin(image, rebin):
    nrows,ncols=image.shape

    # pad nrows,ncols for rebin
    row_remain=(nrows % rebin)
    if row_remain != 0:
        nrows += (rebin-row_remain)
    col_remain=(ncols % rebin)
    if col_remain != 0:
        ncols += (rebin-col_remain)

    imrebin=zeros( (nrows, ncols), dtype='f4' )

    imrebin[0:image.shape[0], 0:image.shape[1]] = image[:,:]

    imrebin = images.rebin(imrebin, rebin)

    return imrebin



def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 4:
        parser.print_help()
        sys.exit(45)

    rebin=options.rebin
    if rebin is not None:
        rebin=int(rebin)

    outfile=os.path.expanduser(args[3])

    g,gh=fitsio.read(args[0],ext=1,header=True)
    r,rh=fitsio.read(args[1],ext=1,header=True)
    i,ih=fitsio.read(args[2],ext=1,header=True)

    print 'sky subtracting'
    g -= gh['skybrite']
    r -= rh['skybrite']
    i -= ih['skybrite']

    print 'scaling'
    print '  ',(gh['FILTER'].split())[0], gh['exptime']
    g *= (des.pretty.NOMINAL_EXPTIME/gh['exptime'])
    print '  ',(rh['FILTER'].split())[0], rh['exptime']
    r *= (des.pretty.NOMINAL_EXPTIME/rh['exptime'])
    print '  ',(ih['FILTER'].split())[0], ih['exptime']
    i *= (des.pretty.NOMINAL_EXPTIME/ih['exptime'])

    print 'shifting images'
    g,i=shift_images(gh,rh,ih,g,i)
    
    print 'flip/transpose'
    g=flip_transpose(g)
    r=flip_transpose(r)
    i=flip_transpose(i)

    print 'getting scaled color'
    #scales= array([5., 6.5, 9.])
    #scales /= scales.min()
    #scales= array([1.0, 1.3, 1.8])
    #scales= array([1.0, 1.1, 1.8])
    #scales= array([1.0, 1.1, 2.0])
    scales= array([1.0, 1.1, 2.0])
    #scales=array([1.,1.,1.])
    scales= des.pretty.SCALE*scales
    nonlinear=des.pretty.NONLINEAR

    if rebin is not None:
        g=do_rebin(g, rebin)
        r=do_rebin(r, rebin)
        i=do_rebin(i, rebin)

    colorim=images.get_color_image(i, r, g, 
                                   scales=scales,
                                   nonlinear=nonlinear,
                                   satval=100)

    print 'bytescaling'
    scales=[des.pretty.SCALE]*3
    colorim = images.bytescale(colorim)

    print 'writing:',outfile
    pim=Image.fromarray(colorim)
    make_dir(outfile)
    pim.save(outfile, quality=90)

main()
