#!/usr/bin/env python
"""
plot dsig for the input run and binning scheme

Note jack also implies corr
"""
from __future__ import print_function
import os,sys
import des
import argparse
import biggles

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("run", help="run identifier")
parser.add_argument("bin_scheme", help="bin scheme, e.g. bin-lgt05-zwide")
parser.add_argument("-t","--type", 
                    help="type to plot",
                    choices=['bin', 'corr', 'jack'],
                    default='bin')
parser.add_argument("-v","--visible",action='store_true',
                    help="show plot on screen")
   
parser.add_argument("-y","--yrange", 
                    help="y range for plot",
                    default=None)

parser.add_argument("--title",
                    default=None,
                    help="add a title")


def main():
    args = parser.parse_args()

    if args.type=='bin':
        data=des.files.read_binned(args.run,
                                          args.bin_scheme)

    binspec=des.files.read_config(args.bin_scheme)
    labels=[bi['label'] for bi in binspec['bin_info']]

    yrng=args.yrange
    if yrng is not None:
        yrng = [float(r) for r in yrng.split(',')]

    # first a plot with the signal
    arr=des.plotting.plot_dsig(data['r'],
                               data['dsig'],
                               data['dsigerr'],
                               ylog=False,
                               yrange=yrng,
                               labels=labels,
                               title=args.title,
                               visible=False)

    # now add bmode
    nbin=data.shape[0]
    grid = des.plotting.Grid(nbin)
    
    for i in xrange(nbin):
        row,col=grid.get_rowcol(i)

        r=data['r'][i,:]
        osig=data['osig'][i,:]
        osigerr=data['dsigerr'][i,:]

        pts=biggles.Points(r, osig, type='filled diamond', color='red')
        err=biggles.SymmetricErrorBarsY(r, osig, osigerr, color='red')

        arr[row,col].add(pts, err)

    epsfile=des.files.get_binned_file(args.run,
                                             args.bin_scheme,
                                             ext='eps')
    epsfile=epsfile.replace('.eps','-bmode.eps')
    print("writing:",epsfile)
    arr.write_eps(epsfile)

    if args.visible:
        arr.show()

main()
