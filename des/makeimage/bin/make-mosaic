#!/usr/bin/env python
"""
    %prog [options] run expname

Make jpegs of all ccds and a mosaic of all images.  Also make a web page with
an image map pointing to the individual images.
"""

import sys
import os
import glob
import esutil as eu
from esutil import wcsutil
from numpy import zeros
import images

import des
import fitsio

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('-r','--rebin',default='24',
                  help="rebin factor")
parser.add_option('-c','--clobber',action='store_true',
                  help="write files even if they already exist")

class MosaicMaker(object):
    def __init__(self,run,expname,rebin_vals,clobber=False):
        self.run=run
        self.expname=expname
        self.clobber=clobber
        self.rebin_vals=rebin_vals

        self.indir,self.outdir=get_dirs(run,expname)

        self.show=False

        if not os.path.exists(self.outdir):
            print 'making directory:',self.outdir
            os.makedirs(outdir)

        print 'input dir:   ',self.indir
        print 'out dir:     ',self.outdir

    def go(self):

        if not self.clobber:
            if self.mosaic_jpg_all_exist():
                print 'all mosaic images already exist'
                return

        print 'getting image list'
        self.set_image_list()

        print 'getting pixel ranges'
        self.set_pixel_ranges()

        print 'making mosaic'
        self.make_mosaic()

        for rebin in self.rebin_vals:

            jpg_file=self.mosaic_jpg_name(rebin)
            if os.path.exists(jpg_file) and not self.clobber:
                print 'mosaic already exists:',jpg_file
                continue

            print '  rebinning by:',rebin
            imrebin=self.do_rebin(rebin)

            print '  writing jpg:',jpg_file
            jpg_shape=des.makeimage.pretty.write_jpg(jpg_file, imrebin, quality=90)

            self.make_html(rebin, jpg_shape)


    def make_mosaic(self):

        nrows=self.rowmax.max()
        ncols=self.colmax.max()

        image=zeros( (nrows, ncols), dtype='f4' )

        rowmin,rowmax,colmin,colmax=self.rowmin,self.rowmax,self.colmin,self.colmax
        info=[]
        for i,path in enumerate(self.flist):

            jpg_file=self.get_jpg_name(path)

            f=fitsio.FITS(path)

            h=f[1].read_header()

            tim=f[1][:,:]

            exptime=h['exptime']
            filt=(h['filter'].split())[0]
            ccd=h['ccdnum']

            ims=des.makeimage.pretty.scale_se_image(tim, exptime=exptime)
            print '  ',jpg_file
            # this is not a bottle neck
            des.makeimage.pretty.write_jpg(jpg_file, ims, quality=90)

            # sometimes there is a slight mismatch in inferred size
            image[rowmin[i]:rowmax[i], colmin[i]:colmax[i]] = ims[:,:]

            info.append({'fits_file':path,
                         'jpg_file':jpg_file,
                         'jpg_local':os.path.join('./',os.path.basename(jpg_file)),
                         'exptime':exptime,
                         'filter':filt,
                         'ccd':ccd})

        self.image=image
        self.infolist=info

    def get_jpg_name(self, path):
        bname=os.path.basename(path)
        jpg_name=bname[0:bname.find('.')]+'.jpg'
        jpg_file=os.path.join(self.outdir,jpg_name)
        return jpg_file

    def mosaic_jpg_name(self, rebin):
        jpg_file=os.path.join(self.outdir,self.expname+'_mosaic%02d.jpg' % rebin)
        return jpg_file

    def mosaic_html_name(self, rebin):
        html_file=os.path.join(self.outdir,self.expname+'_mosaic%02d.html' % rebin)
        return html_file


    def set_image_list(self):
        flist0=glob.glob(self.indir+'/*.fits.fz')
        flist=[]
        for f in flist0:
            if 'bkg' not in f:
                flist.append(f)
        flist.sort()
        if len(flist) != 62:
            raise ValueError("got %d images, expected 62" % len(flist))
        self.flist=flist


    def mosaic_jpg_all_exist(self):
        # continue only if one of them not found
        nfound=0
        for rebin in self.rebin_vals:
            jpg_file=self.mosaic_jpg_name(rebin)
            if os.path.exists(jpg_file):
                nfound += 1

        if nfound==len(self.rebin_vals):
            return True
        else:
            return False

    def set_pixel_ranges(self):
        import biggles
        import pcolors

        flist=self.flist

        nf=len(flist)

        rowmin=zeros(nf,dtype='i8')
        rowmax=zeros(nf,dtype='i8')
        colmin=zeros(nf,dtype='i8')
        colmax=zeros(nf,dtype='i8')

        names=zeros(len(flist), dtype='S5')
        for i,path in enumerate(flist):

            #print path
            f=fitsio.FITS(path)

            h=f[1].read_header()


            ncol=h['znaxis1']
            nrow=h['znaxis2']
            ccd_name=h['detpos']
            names[i] = ccd_name

            print os.path.basename(path), names[i]

            wcs=wcsutil.WCS(h)

            rowmin[i]=0-wcs['crpix2']
            colmin[i]=0-wcs['crpix1']

            # note +1 for idl slices
            rowmax[i]=rowmin[i] + nrow
            colmax[i]=colmin[i] + ncol

        rmin0 = rowmin.min()
        cmin0 = colmin.min()

        rowmin -= rmin0
        rowmax -= rmin0
        colmin -= cmin0
        colmax -= cmin0

        if self.show:
            colors=pcolors.rainbow(len(flist),'hex')
            plt=biggles.FramedPlot()

            for i in xrange(rowmin.size):
                box=eu.plotting.bbox(colmin[i],colmax[i]-1,
                                     rowmin[i],rowmax[i]-1,
                                     color=colors[i])
                lab=biggles.PlotLabel((colmin[i]+colmax[i])/2.,
                                      (rowmin[i]+rowmax[i])/2.,
                                      str(names[i].strip()))
                plt.add(box)
                plt.add(lab)

            plt.xlabel='columns'
            plt.ylabel='rows'
            plt.show()

        self.rowmin=rowmin
        self.rowmax=rowmax
        self.colmin=colmin
        self.colmax=colmax

    def make_html(self, rebin, jpg_shape):

        mosaic_jpg=self.mosaic_jpg_name(rebin)
        mosaic_local=os.path.join('./', os.path.basename(mosaic_jpg))

        jpg_rmin, jpg_rmax, jpg_cmin, jpg_cmax = \
                self.get_jpg_coords(jpg_shape,rebin)
        html_name=self.mosaic_html_name(rebin)
        print 'writing html:',html_name
        with open(html_name,'w') as fobj:
            head=_head % {'expname':self.expname,
                          'filter':self.infolist[0]['filter'],
                          'exptime':self.infolist[0]['exptime'],
                          'mosaic':mosaic_local}
            fobj.write(head)

            for i,info in enumerate(self.infolist):
                area='      <area shape="rect" coords="{coords}" href="{ccdimage}" alt="CCD {ccd}" title="CCD {ccd}">\n'

                coords=[jpg_cmin[i],jpg_rmin[i],jpg_cmax[i],jpg_rmax[i]]
                coords_str=[str(c) for c in coords]
                coords_str=','.join(coords_str)

                area=area.format(coords=coords_str,
                                 ccdimage=info['jpg_local'],
                                 ccd=info['ccd'])

                fobj.write(area)
            fobj.write(_foot)

    def do_rebin(self, rebin):
        image=self.image
        nrows,ncols=image.shape

        # pad nrows,ncols for rebin
        row_remain=(nrows % rebin)
        if row_remain != 0:
            nrows += (rebin-row_remain)
        col_remain=(ncols % rebin)
        if col_remain != 0:
            ncols += (rebin-col_remain)

        imrebin=zeros( (nrows, ncols), dtype='f4' )

        imrebin[0:image.shape[0], 0:image.shape[1]] = image[:,:]
        check_rebin(imrebin, rebin)

        imrebin = images.rebin(imrebin, rebin)

        return imrebin




    def get_jpg_coords(self,jpg_shape,rebin):
        """
        jpg coordinates start in the upper left corner

        We did a flip up down and a transpose to get north up 
        and east left in the jpg and to account for the flip
        caused by jpg

        html image maps also start in upper left, so match jpg
        """
        rminbin=self.rowmin/rebin
        rmaxbin=self.rowmax/rebin
        cminbin=self.colmin/rebin
        cmaxbin=self.colmax/rebin

        # flip up down and transpose.  Note using cols (shape[1]) because
        # we transposed
        rminbin = jpg_shape[1]-rminbin
        rmaxbin = jpg_shape[1]-rmaxbin

        # transpose, y becomes x and x becomes y
        jpg_rmin = cminbin
        jpg_rmax = cmaxbin
        jpg_cmin = rminbin
        jpg_cmax = rmaxbin

        return jpg_rmin, jpg_rmax, jpg_cmin, jpg_cmax




def check_rebin(image, rebin):
    nrows=image.shape[0]
    ncols=image.shape[1]

    if ( (nrows % rebin) != 0
            or (ncols % rebin) != 0 ):
        raise ValueError("dims = (%d,%d) not multiple of "
                         "rebin %d" % (nrows,ncols,rebin))


def get_dirs(run,expname):
    desdata=os.environ['DESDATA']
    indir  = os.path.join(desdata,'OPS','red',run,'red',expname)
    outdir = os.path.join(desdata,'jpg','OPS',run,expname)
    return indir, outdir


_head="""
<html>
  <head>
      <style type="text/css">
          table.simple {
              border-color: green;
              border-width: 1px;
              border-collapse: collapse;
          }   
           table.simple th {
                padding: 2px;
                border-width: 1px;
                border-style: inset;
           }   
           table.simple td {
                padding: 2px;
                border-width: 1px;
                border-style: inset;
           }   


      </style>
  </head>

  <body bgcolor="black" text="#888888"> 

   <table class=simple>
       <tr><th>Exposure</th><th>filter</th><th>exposure time (sec)</th><th>Orientation</th></tr>
       <tr><td>%(expname)s</td><td>%(filter)s</td><td>%(exptime)d</td>   <td> North up, East left      </td></tr>
   </table>

   <img src="%(mosaic)s" usemap="#expmap">
   <map name="expmap">
"""
_foot="""
    </map> 
  </body>
</html>
"""


def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 2:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    expname=args[1]

    clobber=options.clobber

    rebin_vals=options.rebin.split(',')
    rebin_vals=[int(r) for r in rebin_vals]


    maker=MosaicMaker(run,expname,rebin_vals, clobber=clobber)
    maker.go()

main()
