#!/usr/bin/env python
"""
    %prog [options] file

Description:

    Reads a LaTex coded equation from a file and creates a pdf document
    containing the equation.  By default, the output file is named file.pdf,
    with any existing extension on file removed.  There is also an option to
    set the output file name.

    The input equation file should contain LaTex equation code which can be 
    placed in an eqnarray* environment.  For example, you might create a file 
    called sigma.tex containing:
        \Sigma(r) = A (r_0/r)^2
    Note, no other latex markup is required, such as \\begin{document} or a 
    \\documentclass declaration. Then running:
        mkeq sigma.tex
    will output a file called sigma.pdf

Restrictions:
    Python 2.3 or later is required due to the use of the built-in optparse 
    module.  The following programs are required to be in the user's path:
        latex
        dvips
        epstopdf
    Also, a UNIX like system is assumed in a few places. 

Modification History: 
    Created: 2007-10-31, Erin Sheldon, NYU.  Written in python.
"""

license="""
  Copyright (C) 2009  Erin Sheldon

    This program is free software; you can redistribute it and/or modify it
    under the terms of version 2 of the GNU General Public License as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""

import sys
import os
import tempfile
from optparse import OptionParser

parser=OptionParser(__doc__)

parser.add_option("-f","--format",default="pdf", 
    help="File format. Can be pdf or eps. Default is %default")

parser.add_option("-c","--color",default="black", 
    help="Color for the equation.  Must be supported by the latex "+\
    "color package.  Default is %default.")
parser.add_option("-o","--output",default=None, 
    help="Output file name.  Default is the same as the input file name "+\
    "but with a .pdf extension.")
parser.add_option("-v","--verbose",action="store_true",dest="verbose",
                  help="Print information, such as the latex command "+\
                  "used to generate the pdf file")

def Exec(command):
    """Execute a command and exit if it fails"""
    ret = os.system(command)
    if ret != 0:
        sys.stderr.write('Error executing command: %s\n' % command)
        sys.exit(ret)

def GetNames(file, format, output=None):
    """Create temporary files and an output file name"""
    # Dictionary to hold names
    fdict = {}
    fdict['infile'] = file

    # strip off the extension
    base = os.path.basename(file)
    base = base.split('.')
    if len(base) > 1:
        base = '.'.join(base[0:-1])
    fdict['base'] = base

    fdict['format'] = format

    # final output file
    if output is None:
        if format == 'pdf':
            ext='.pdf'
        else:
            ext='.eps'

        output = base + ext

    fdict['output_file'] = output

    # temporary directory. This creates dir and returns the name as a string
    tmpdir = tempfile.mkdtemp(prefix='mkeq-'+base)
    fdict['tmpdir'] = tmpdir
    fdict['tmptex'] = os.path.join(tmpdir, base+'.tex')
    fdict['tmpdvi'] = os.path.join(tmpdir, base+'.dvi')
    fdict['tmpeps'] = os.path.join(tmpdir, base+'.eps')

    return fdict

def MakeTex(fdict):
    """Create a tex file containing the equation"""
    input = open(fdict['infile'], 'r')
    tmptex = open(fdict['tmptex'], 'w')

    tmptex.write('\\documentclass[12pt]{article}\n')
    tmptex.write('\\usepackage{color}\n')
    tmptex.write('\\pagestyle{empty}\n')
    tmptex.write('\\pagecolor{white}\n')
    tmptex.write('\\begin{document}\n')
    tmptex.write('{\\color{%s}\n' % (fdict['color'],))
    tmptex.write('\\begin{eqnarray*}\n')

    # Insert the equation
    for line in input:
        line = line.strip()
        if line != '':
            tmptex.write(line)

    tmptex.write('\\end{eqnarray*}}\n')
    tmptex.write('\\end{document}\n')

    input.close()
    tmptex.close()

def MakeOutput(fdict):
    """Run latex, dvips and epstopdf to create the output file"""
    # Run latex
    command = \
            'latex ' + \
            '--interaction=batchmode '+\
            '--output-directory=%s %s > /dev/null' % \
            (fdict['tmpdir'],fdict['tmptex'])

    if fdict['verbose']:
        sys.stdout.write('command: %s\n' % command)
    Exec(command)
    # dvips, making a cropped eps file (-E)
    command = \
            'dvips -q -E -o %s %s' % (fdict['tmpeps'],fdict['tmpdvi'],)
    Exec(command)
    # epstopdf.  Better for eps than ps2pdf, it preserves bounding box

    if fdict['format'] == 'pdf':
        command='epstopdf %s --outfile=%s' % (fdict['tmpeps'],fdict['output_file'],)
    else:
        command='cp %s %s' % (fdict['tmpeps'], fdict['output_file'])
    Exec(command)

def Cleanup(fdict):
    """Clean up the temporary files"""
    command = 'rm -r '+fdict['tmpdir']
    Exec(command)

def check_format(output_format):
    format = output_format.lower()
    if format not in ['pdf','eps']:
        raise ValueError("format must be 'pdf' or 'eps'.  You entered '%s'" % format)

    return format

#
# Main program
#

options, args = parser.parse_args(sys.argv[1:])

if len(args) < 1:
    parser.print_help()
    sys.exit(45)

file = args[0]

format = check_format(options.format)

fdict = GetNames(file, format, output=options.output)
fdict['color'] = options.color
fdict['verbose'] = options.verbose

MakeTex(fdict)
MakeOutput(fdict)
Cleanup(fdict)



