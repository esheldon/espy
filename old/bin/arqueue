#!/usr/bin/env python
"""

Since one must use a password for the shportal, but password cannot be sent on
the command line in openssh, we need a way to feed the password to ssh.  The
unix way is to use the "expect" program.  This script uses pexpect, a python
implementation of expect.

There are two authentications that must occur:
    1) the password to log in.
    2) the "secret" used when running an archive command.

Put these two in a file ~/.shportal, e.g.
    some_password
    some_secret

And make it unreadable by anyone but you
    chomd go-r ~/.shportal

"""

import pexpect
import sys
import os

COMMAND_PROMPT = '[$#] '
TERMINAL_PROMPT = r'Terminal type\?'
TERMINAL_TYPE = 'vt100'
SSH_NEWKEY = r'Are you sure you want to continue connecting \(yes/no\)\?'

def login(host, user, password):

    child = pexpect.spawn('ssh -l %s %s' % (user, host), 
                          timeout=60, logfile=sys.stdout )

    i = child.expect([pexpect.TIMEOUT, SSH_NEWKEY, '[Pp]assword: '])
    if i == 0: # Timeout
        print 'ERROR!'
        print 'SSH could not login. Here is what SSH said:'
        print child.before, child.after
        sys.exit (1)
    if i == 1: # SSH does not have the public key. Just accept it.
        child.sendline ('yes')
        child.expect ('[Pp]assword: ')
    child.sendline(password)
    # Now we are either at the command prompt or
    # the login process is asking for our terminal type.
    i = child.expect (['Permission denied', TERMINAL_PROMPT, COMMAND_PROMPT])
    if i == 0:
        print 'Permission denied on host:', host
        sys.exit (1)
    if i == 1:
        child.sendline (TERMINAL_TYPE)
        child.expect (COMMAND_PROMPT)
    return child


def main():
    secrets = open(os.path.expanduser('~/.shportal')).readlines()
    pwd = secrets[0].strip()
    secret = secrets[1].strip()

    # so the shell on desar won't complain about missing termcap entries
    os.environ['TERM']='xterm-color'

    child = login('desar.cosmology.illinois.edu', 'shportal', pwd)
    if child == None:
        raise RuntimeError('Could not login to host: %s' % host)

    child.sendline('descmd arverify --project=DES --run=20100429022832_20100326 --filetype=red_cat bnl')
    child.expect('secret:')
    child.sendline(secret)
    child.expect(COMMAND_PROMPT)
    child.sendline('exit')

if __name__ == '__main__':
    try:
        main()
    except pexpect.ExceptionPexpect, e:
        print str(e)

