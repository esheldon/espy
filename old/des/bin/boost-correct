#!/usr/bin/env python
"""
correct the lenses for clustering of sources with the lenses

This must run after binning.
For type jack, it must run after binning and jackknifing.
"""
from __future__ import print_function
import os,sys
import des
import esutil as eu
import argparse
import fitsio

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("lens_run", help="run identifier")
parser.add_argument("rand_run", help="run identifier")
parser.add_argument("bin_scheme", help="bin scheme, e.g. bin-lambda01-z01")

parser.add_argument("type", help="type to correct",
                    choices=['binned', 'jack'])

def get_data(args):
    rdata=des.files.read_match_binned(args.lens_run, args.rand_run, args.bin_scheme)
    if args.type=='binned':
        data=des.files.read_binned(args.lens_run, args.bin_scheme)
    else:
        data=des.files.read_jack(args.lens_run, args.bin_scheme)

    return data, rdata

def write_data(args, data):
    if args.type=='binned':
        d=des.files.get_corr_binned_dir(args.lens_run,
                                        args.rand_run,
                                        args.bin_scheme)
        fname=des.files.get_corr_binned_file(args.lens_run,
                                             args.rand_run,
                                             args.bin_scheme)
    else:
        d=des.files.get_corr_jack_dir(args.lens_run,
                                      args.rand_run,
                                      args.bin_scheme)
        fname=des.files.get_corr_jack_file(args.lens_run,
                                           args.rand_run,
                                           args.bin_scheme)

    if not os.path.exists(d):
        print("making dir:",d)
        os.makedirs(d)

    print("writing:",fname)
    fitsio.write(fname, data, clobber=True)

def main():
    args = parser.parse_args()

    data,rdata=get_data(args)

    odata=des.boost_factors.add_boost_factors(data, rdata)

    write_data(args, odata)


main()
