#!/usr/bin/env python
"""
    %prog [options]

Description

    Make image cutouts.

    Read from stdin a list of images and positions.  
    
        imagename ext x y npix output_file [imsize]

    The output type is inferred from the name, either png or ext.

    If type is png, a size for the output in pixels can be given, otherwise
    you can use the -s options, default 800 pix.    

    x,y are image locations, where the image is subscripted [x,y].  Note in
    python you probably need to reverse these if the x,y come from SExtractor
    catalogs.  npix is the linear size of the cutout, so the cutout is

        image[x-npix/2. : x+npix/2., y-npix/2. : y+npix/2.]
    
    The input image must be a fits file and ext is the image extension, zero
    offset.

    If consecutive image names are the same, the image is only read once.
"""

import fitsio
import images
import sys
from sys import stdin, stderr

from optparse import OptionParser

parser=OptionParser(__doc__)
parser.add_option("-s","--imsize",default=800, 
                  help=("Optional size of png images in pixels, used "
                        "when not sent in last column"))
parser.add_option("--show",action='store_true',
                  help="show each cutout on the screen and wait pause.")

_allowed_ext=['png','eps']
_ext_err='extension must be ['+','.join(_allowed_ext)+']'

def make_name(imfile, x, y, npix, type, name=None):
    imbase=os.path.basename(imfile)

    if name is None:
        n='%s-%d-%0.2f-%0.2f.%s' %(imbase,npix,x,y,type)
    else:
        n='%s-%d-%s.%s' % (imbase,npix,name)
    return n

def write_output(plt, name, imsize):
    print 'writing file:',name
    ext = get_ext(name)
    if ext == 'png':
        plt.write_img(imsize,imsize,name)
    else:
        plt.write_eps(name)


def make_cutout(image, x, y, npix):
    xmin = x-npix/2.
    if xmin < 0:
        xmin=0
    xmax = x+npix/2.
    if xmax > (image.shape[0]-1):
        xmax = (image.shape[0]-1)

    ymin = y-npix/2.
    if ymin < 0:
        ymin=0
    ymax = y+npix/2.
    if ymax > (image.shape[1]-1):
        ymax = (image.shape[1]-1)

    return image[xmin:xmax, ymin:ymax]


def get_ext(name):
    exti=name.find('.')
    if exti == -1:
        print _ext_err
        sys.exit(1)

    ext = name[exti+1:]
    if ext not in _allowed_ext:
        print _ext_err
        sys.exit(1)
    return ext

def process_line(line, options):
    ls = line.split()
    nel = len(ls)

    if nel < 6:
        print 'Each line must have at least 6 elements'
        parser.print_help()
        sys.exit(1)

    imfile = ls[0]
    ext = int(ls[1])
    x = float(ls[2])
    y = float(ls[3])
    npix = int(ls[4])
    outf = ls[5]

    fext = get_ext(outf)
    if fext == 'png':
        if nel > 6:
            imsize = int(ls[6])
        else:
            imsize = int(options.imsize)
    else:
        imsize=None

    return imfile,ext,x,y,npix,outf,imsize

def main():
    options, args = parser.parse_args(sys.argv[1:])

    imfile_old=''
    for line in stdin:

        imfile,ext,x,y,npix,outf,imsize = process_line(line,options)

        if imfile != imfile_old:
            imfile_old = imfile
            ff = fitsio.FITS(imfile)
            image = ff[ext].read()


        cutout = make_cutout(image, x, y, npix)

        if cutout.size == 0:
            print 'zero sized cutout:',cutout.shape,'not writing',outf
            continue


        plt = images.view(cutout, show=options.show)

        if options.show:
            key=raw_input('hit a key (q to quit): ')
            if key  == 'q':
                return

        write_output(plt, outf, imsize)

main()
