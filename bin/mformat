#! /usr/bin/env python

'''
    %prog [options] filename

Description

    Show a simplified representation of an email message. Replaces
    binary attachments with a

      "# Attachment: filename (type)" 

    Uses w3m to convert html into text.  By default, only a few
    interesting headers are shown.

    If filename is - then read from the standard in.

    Output is written to standard out by default.  This can be changed 
    with the options -p/-g/-w/-o and their longer versions.
    
    Calling with alternative names:

        By symlinking mformat to another name, you can change it's 
        behavior.

            Calling this function as "mview" will force paging of the
            output.
                equivalent to mformat -f and -o/--output-file is ignored.

            Calling this function as "tmview" will force sending the
            output to vim in a new xterm.
                Equivalent to mformat -t and -o/--output-file is ignored.

            Calling this function as "gmview" will force sending the
            output to gvim.
                Equivalent to mformat -g and -o/--output-file is ignored.

            Calling this function as "wmview" will force sending the
            output to firefox.
                Equivalent to mformat -w and -o/--output-file is ignored.'''

import email
import os
import sys
from sys import stdout,stderr
import subprocess
from subprocess import Popen,PIPE,STDOUT
import tempfile


from optparse import OptionParser

parser=OptionParser(__doc__)


parser.add_option("-o","--output-file",
                  default=None,dest="ofile", 
                  help="Write the output to the specified filename.")

parser.add_option("-H","--full-header",action="store_true",dest="full_header",
                  default=False,
                  help="Show the full header.  Default %default")
parser.add_option("-p","--page",action="store_true",dest="page",
                  default=False,
                  help="Page the output in vim with email hilighting.  Default is %default")
parser.add_option("-f","--force-page",action="store_true",dest="force_page",
                  default=False,
                  help="Page the output in vim even if in a pipeline.  Default is %default")

parser.add_option("-t","--term-view",action="store_true",dest="term_view",
                  default=False,
                  help="Send to vim in an xterm with email hilighting. ")
parser.add_option("-g","--gui",action="store_true",dest="gui",
                  default=False,
                  help="Send to gvim with email hilighting")
parser.add_option("-w","--web-view",action="store_true",dest="web_view",
                  default=False,
                  help="Send to a web browser with email hilighting")

#parser.add_option("-v","--verbose",action="store_true",dest="verbose",
#                  default=False,
#                  help="Show informative messages.  Currently has "
#                       "no effect. Default %default")


class EmailFileFormatter:
    """
    Read the file as email and create a nice viewable version in string
    form.
    
    Keep only the headers of interest and refer to attachments by number.
    """
    def __init__(self, name, **keys):
        #self.verbose = keys.get('verbose',False)
        self.msg = self.get_message_from_file(name)

        self.full_header = keys.get('full_header',False)
        self.header_keys = keys.get('headers',None)
        if self.header_keys is None:
            self.header_keys = ['From',
                                'To',
                                'Reply-To',
                                'Cc',
                                'Bcc',
                                'Date',
                                'Message-Id',
                                'User-Agent',
                                'Subject']

        self.PAGER = 'vim -R -c "set filetype=mail" -'
        self.VIEWER = 'gvim -R -c "set filetype=mail" -'
        self.TERM_VIEWER = 'xterm -fb fixed -tn xterm-256color -e vim -c "set ft=mail" -R'
        self.HTMLIZER = 'vim -fNn -c "set filetype=mail" -c TOhtml -c "wq" -c q'
        #self.HTML_VIEWER = 'firefox -new-window'
        self.HTML_VIEWER = 'firefox'

        self.tlist = []
        self.extract_header()
        self.extract_parts()
        # for a final newline
        self.tlist.append('')

    def message(self):
        mess = '\n'.join(self.tlist)
        return mess

    # read in the email message from an arg or stdin
    def get_message_from_file(self, name=None):
        if name == '-':
            fp = sys.stdin
        else:
            fp = open(name)
        return email.message_from_file(fp)

    def extract_header(self):
        if self.full_header:
            for key in self.msg.keys():
                val = self.msg[key]
                self.tlist.append('%s: %s' % (key,val))
        else:
            for key in self.header_keys:
                if key in self.msg:
                    val = self.msg[key]
                    self.tlist.append('%s: %s' % (key,val))

        self.tlist.append("")# one extra newline in case text abuts headers

    def extract_parts(self):
        for part in self.msg.walk():
            self.extract_part(part)

    def extract_part(self, part):
        type = part.get_content_type()
        if part.get_filename() is not None:
            self.tlist.append("# Attachment: %s (%s)\n" % (part.get_filename(),type) )
        
        elif type == "text/plain" or type == "text/html":
            command = "w3m -dump -T %s" % type
            try:
                ch = Popen(command,shell=True,stdin=PIPE,stdout=PIPE,stderr=PIPE)
            except OSError as e:
                stderr.write("Execution failed: %s\n" % e)
                sys.exit()
            ch.stdin.write(str(part.get_payload(decode=True)))
            ch.stdin.close()
            out = ch.stdout.read().strip()
            err = ch.stderr.read()
            ch.wait()
            if len(err):
                stdout.write("Error with w3m: %s\n" % err)
                sys.exit()
            self.tlist.append(out)

    def page(self, force=False):
        """
        Page through text by feeding it to another program.
        This does not open a new window.
        """
        if force:
            pipe = os.popen(self.PAGER, 'w')
            try:
                pipe.write(self.message())
                pipe.close()
            except IOError:
                pass # Ignore broken pipes caused by quitting the pager program.
        else:
            # This program will decide if we need paging.  E.g. if we are
            # piping stdout it will not page

            import pydoc
            os.environ['PAGER'] = self.PAGER
            pydoc.pager(self.message())

    def write(self, ofile=None):
        """
        Just print to the opened ofile or stdout
        """
        if ofile is None:
            ofile=sys.stdout
        for l in self.tlist:
            ofile.write(l)
            ofile.write('\n')

    def gui_view(self):
        """
        First write to a temporary file and then use the viewer to view it
        """
        fname = tempfile.mktemp(prefix='mview-',suffix='.eml')
        f = open(fname,'w')
        for l in self.tlist:
            f.write(l)
            f.write('\n')
        f.close()
        f = open(fname,'r')
        p = Popen(self.VIEWER,
                  stdin=f,
                  stdout=PIPE,stderr=PIPE,shell=True)
        f.close()
        os.remove(fname)

    def term_view(self):
        """
        First write to a temporary file and then use the viewer to view it

        For some reason vim is getting confused by this.
        """
        fname = tempfile.mktemp(prefix='mview-',suffix='.eml')
        f = open(fname,'w')
        for l in self.tlist:
            f.write(l)
            f.write('\n')
        f.close()
        p = Popen(self.TERM_VIEWER+' "%s"' % fname,
                  stdout=PIPE,stderr=PIPE,shell=True)
        #os.remove(fname)



    def web_view(self):
        """
        First write to an html-ized file and then use gnome-open to view it,
        which will choose an appropriate browser
        """
        #import time
        fname = tempfile.mktemp(prefix='mview-',suffix='.eml')
        f = open(fname,'w')
        for l in self.tlist:
            f.write(l)
            f.write('\n')
        f.close()
        p = Popen(self.HTMLIZER+' "%s"' % fname,
                  stdout=PIPE,stderr=PIPE,shell=True)
        p.communicate()

        htmlname = fname+'.html'

        p = Popen(self.HTML_VIEWER+' file://"%s"' % htmlname,
                  stdout=PIPE,stderr=PIPE,shell=True)
        os.remove(fname)
        #os.remove(htmlname)


def get_options():

    options, args = parser.parse_args(sys.argv[1:])

    if len(args) == 0:
        parser.print_help()
        sys.exit(45)

    execname = os.path.basename(sys.argv[0])
    if execname in ['mview','gmview','wmview','tmview']:
        # turn everything off and only perform the
        # specified action indicated by the execname

        ofile      = None
        page       = False
        force_page = False
        gui        = False
        web_view   = False
        term_view  = False

        if execname == 'mview':
            force_page = True
        elif execname == 'gmview':
            gui = True
        elif execname == 'wmview':
            web_view=True
        elif execname == 'tmview':
            term_view=True

        options.ofile=ofile
        options.page=page
        options.force_page=force_page
        options.gui=gui
        options.web_view=web_view
        options.term_view=term_view

    return options, args

def main():

    options, args = get_options()
    fname = args[0]

    mfile = EmailFileFormatter(fname, 
                               full_header=options.full_header)

    if options.ofile is not None:
        mfile.write(open(ofile,'w'))
    else:
        if options.page or options.force_page:
            mfile.page(force=options.force_page)
        elif options.gui:
            mfile.gui_view()
        elif options.web_view:
            mfile.web_view()
        elif options.term_view:
            mfile.term_view()
        else:
            mfile.write()

main()
