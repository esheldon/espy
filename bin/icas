#!/usr/bin/env python

"""

    %prog [options]

A interactive prompt for sending queries to the SDSS Skyserver, also known as
the Catalog Archive Server (CAS).  This takes the form of a Read Eval Print
Loop (REPL).

You can enter queries at a command line, which are then sent to the database
and the results retrieved.  Queries must end with a semicolon;  if you hit
return without a semicolon, you can continue to enter text on the next line
until a semicolon is entered.

Queries are kept in a history which you can access at any time with "up-arrow"
(also j,k in vi mode).  These are saved in a file ~/.icas-history and loaded in
the next session.

Results can be optionally sent to a pager with the -p/--pager switch.

By default, a fancy formatting is applied to the results.  This can be 
turned off with the -s/--simple.

"""
import sys
from sys import stdout,stderr
import os

import readline
import atexit
import pydoc

from optparse import OptionParser

_default_url='http://cas.sdss.org/public/en/tools/search/x_sql.asp'
parser=OptionParser(__doc__)
parser.add_option('-u','--url',default=_default_url,
                  help="set output format (html,xml,csv - default: csv)")
parser.add_option('-s','--simple',action="store_true",
                  help="Don't format the results, just print the straight CSV"
                       "delivered from the CAS")
parser.add_option('-p','--page',action='store_true',
                  help="send the results to a pager")


_allowed_formats = ['csv','xml','html']
def setproxy():
    import socket
    hname = socket.gethostname().lower()
    if ('lsst' in hname
            or 'bach' in hname
            or 'tutti' in hname):
        os.environ['http_proxy']='http://192.168.1.130:3128'

def center_text(text, width):
    text = text.strip()
    space = width - len(text)
    return ' '*(space/2) + text + ' '*(space/2 + space%2)


class REPL:
    def __init__(self, url, simple=False, page=False):
        self._url=url
        self._page=page
        self._simple=simple

        # format to return from the CAS
        self._fmt = 'csv'

        self.setup_history()

    def setup_history(self):
        self._histfile = os.path.join(os.environ["HOME"], ".icas-history")
        try:
            readline.read_history_file(self._histfile)
        except IOError:
            pass

        atexit.register(readline.write_history_file, self._histfile)


    def run(self):

        qry = ''
        while qry != 'quit':
            qry = self.get_query()
            
            data = self.send_query(qry)
            if self._simple:
                self.simple_print(data)
            else:
                self.fancy_print(data)

    def simple_print(self, data):
        ofp = stdout
        for line in data:
            if line.startswith("ERROR"): # SQL Statement Error -> stderr
                ofp = stderr

            ofp.write(line.rstrip())
            ofp.write(os.linesep)

    def fancy_print(self, data):
        """
        Read all the data and use it to generate formatting
        """

        self._fobj = stdout

        header=self.read_header(data)
        if header is None:
            return
        header = header.strip()
        names = header.split(',')
        nnames=len(names)

        # initialize lengths to the names
        max_lens = {}
        for name in names:
            max_lens[name] = len(name)

        # now collect the results to get the lengths
        results = {}
        for name in names:
            results[name] = []

        rng = range(nnames)
        for line in data:
            l = line.split(',')
            nl = len(l)
            if nl < nnames:
                stdout.write("Expected %s results, got %s\n" % (nnames,nl))
                stdout.write("header: %s\n" % header)
                stdout.write("This line: %s" % line)
                #return
            for i in rng:
                name=names[i]
                res = l[i].strip()

                results[name].append(res)
                max_lens[name] = max(max_lens[name], len(res))

        # now create the forms for writing each field
        forms = {}
        separator = ''
        i=0
        ntot = len(names)
        for name in names:
            forms[name]    = ' %-'+str(max_lens[name])+'s '

            pad = 2
            if i == (ntot-1):
                pad=1
            this_sep = '%s' % '-'*(max_lens[name]+pad)

            if i > 0:
                forms[name] = '|' + forms[name]
                this_sep = '+' + this_sep
            separator += this_sep
            i+=1

        # possible header and title
        header = ''
        for name in names:
            header += forms[name] % center_text(name,max_lens[name])

        # if we are paging, we will store the lines, otherwise this won't be used
        lines = []
        if self._page:
            lines.append(header)
            lines.append(separator)

        else:
            self._fobj.write(header)
            self._fobj.write('\n')

            self._fobj.write(separator)
            self._fobj.write('\n')

        nlines = len(results[names[0]])
        for i in xrange(nlines):
            line = ''
            for name in names:
                val = results[name][i]

                if self._page:
                    line += forms[name] % val
                else:
                    self._fobj.write(forms[name] % val)

            if self._page:
                lines.append(line)
            else:
                self._fobj.write('\n')

        if self._page:
            lines = '\n'.join(lines)
            pydoc.pager(lines)



    def read_header(self, data):
        # read the header
        header = data.readline()
        if header.startswith("ERROR"):
            stderr.write(header)
            for err in data:
                stderr.write(err)
            return None

        return header



    def filtercomment(self, sql):
        "Get rid of comments starting with --"
        fsql = ''
        for line in sql.split('\n'):
            fsql += line.split('--')[0] + ' ' + os.linesep;
        return fsql
    def remove_semicolon(self, sql):
        s = sql.split(';')
        return s[0]

    def send_query(self, sql):
        "Run query and return file object"
        import urllib
        fsql = self.filtercomment(sql)
        fsql = self.remove_semicolon(fsql)
        params = urllib.urlencode({'cmd': fsql, 'format': self._fmt})
        return urllib.urlopen(self._url+'?%s' % params)    

    def get_query(self):
        """
        Read the query as raw input
        """
        qry = ''
        i=1
        while ';' not in qry:
            # if we are on the next line, add an extra space
            # to avoid syntax errors
            if i > 1:
                qry = qry + ' '

            try:
                qry+= raw_input('cas> ')
            except:
                # probably hit ctrl-d, ctrl-c or something
                sys.exit(0)
            i += 1

        return qry


def main(argv):
    """
    Parse command line and do it...
    """
    
    options, args = parser.parse_args(sys.argv[1:])

    url=options.url
    simple=options.simple
    page=options.page

    setproxy()

    repl = REPL(url, simple=simple, page=page)

    repl.run()


if __name__=='__main__':
    main(sys.argv)

