#!/usr/bin/env python
"""
    Display statistics about the lsf queue

    This program runs `bjobs -w` and parses the output.
"""
from __future__ import print_function
import re
import subprocess
from argparse import ArgumentParser, RawDescriptionHelpFormatter


parser = ArgumentParser(
    formatter_class=RawDescriptionHelpFormatter,
    description=__doc__,
)

parser.add_argument(
    "-p", "--pattern",
    help="only show jobs that mach the input regular expression.",
)

_command = (
    "bjobs -o 'jobid user stat run_time queue exec_host job_name submit_time'"
)


class LSFLister(dict):
    def __init__(self, pattern):

        self.pattern = pattern

        if self.pattern is not None:
            self.matcher = re.compile(self.pattern)

        self.command = _command

        self.headers = (
            'JOBID', 'USER', 'STAT', 'RUN_TIME', 'QUEUE',
            'EXEC_HOST', 'JOB_NAME', 'SUBMIT_TIME',
        )

        self.hdict = {}
        for h in self.headers:
            self.hdict[h.lower()] = h

        self.nperline = len(self.headers) + 2

    def go(self):

        out = self.get_listing()
        out = out.split('\n')

        stats = {
            'njobs': 0, 'run': 0, 'pending': 0,
            'suspended': 0, 'unknown': 0,
        }
        lengths = {}
        for h in self.headers:
            lengths[h.lower()] = len(h)

        line_splits = []
        for ii in range(len(out)):
            line = out[ii]

            if len(line) > 0:

                ls = line.split()
                if ls[0] == 'JOBID':
                    # this is the header
                    continue

                if self.pattern is not None:
                    if self.matcher.match(line) is None:
                        continue

                stats['njobs'] += 1
                lsplit = self.process_line(ls, stats, lengths)

                line_splits.append(lsplit)

        print()
        self.write_statline(stats)
        print()
        self.write_job_listing(line_splits, lengths)

    def write_job_listing(self, line_splits, lengths):

        if len(line_splits) > 0:
            fmt = ' %(jobid)-' + str(lengths['jobid']) + 's  '
            fmt += '%(user)-' + str(lengths['user']) + 's  '
            fmt += '%(stat)-' + str(lengths['stat']) + 's  '
            fmt += '%(run_time)-' + str(lengths['run_time']) + 's  '
            fmt += '%(queue)-' + str(lengths['queue']) + 's  '
            fmt += '%(exec_host)-' + str(lengths['exec_host']) + 's  '
            fmt += '%(job_name)-' + str(lengths['job_name']) + 's  '
            fmt += '%(submit_time)-' + str(lengths['submit_time']) + 's'

            header = fmt % self.hdict
            print(header)

            for ii in range(len(line_splits)):
                ls = line_splits[ii]
                line = fmt % ls
                print(line)

    def write_statline(self, stats):

        line = (
            " Jobs: %(njobs)s Running: %(run)s Pending: %(pending)s "
            "Suspended: %(suspended)s Unknown: %(unknown)s"
        )

        line = line % stats

        print(line)

    def process_line(self, ls, stats, lengths):
        """
        process the line and return a new line with
        the executable represented only as the basname,
        and rcf.bnl.gov removed from the slot name

        """

        if len(ls) >= self.nperline:
            res = {}
            (res['jobid'],
             res['user'],
             res['stat'],
             res['run_time'],
             res['junk'],
             res['queue'],
             res['exec_host'],
             res['job_name'],
             res['mon'],
             res['day'],
             res['time']) = ls

        else:
            raise ValueError(
                "Expected %d results from "
                "listing, got %d: %s" % (self.nperline, len(ls), ' '.join(ls))
            )

        # this is the string second(s)
        del res['junk']

        res['run_time'] = float(res['run_time'])/60  # minutes
        res['run_time'] = '%.1f min' % res['run_time']

        res['submit_time'] = ' '.join([res['mon'], res['day'], res['time']])
        del res['mon']
        del res['day']
        del res['time']

        if res['stat'] == 'RUN':
            stats['run'] += 1
        elif res['stat'] == 'PEND':
            stats['pending'] += 1
        elif 'SUSP' in res['stat']:
            stats['suspended'] += 1
        elif 'UNK' in res['stat']:
            stats['unknown'] += 1

        for key in res:
            if key in lengths:
                lengths[key] = max(lengths[key], len(res[key]))
            else:
                lengths[key] = len(res[key])

        return res

    def get_listing(self):
        pobj = subprocess.Popen(
            self.command,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            shell=True,
        )
        stdout_ret, stderr_ret = pobj.communicate()
        return str(stdout_ret, 'utf-8')


def main():

    try:
        args = parser.parse_args()

        lister = LSFLister(pattern=args.pattern)
        lister.go()

    except IOError:
        # to deal with pipes
        pass


main()
