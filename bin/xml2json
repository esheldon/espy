#!/usr/bin/env python
"""
    %prog [options] xmlfiles

Description:

    Convert the input xml file list to json format.  The root tag is not
    preserved."""


import json
from esutil import xmltools
from esutil import json_util as ju

import sys
from sys import stdout
import os
import re
import shutil

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--dryrun", action='store_true', default=False,
  help="Just print the files that will be converted.")
parser.add_option("--outdir",default=None,
                  help="Move the xml files to the given directory, creating it"
                  " if necessary")
parser.add_option("--key",default=None,
    help="Extract the key from the data.  If the Primary entry (after the root) is not a dictionary this will fail")

options, args = parser.parse_args(sys.argv[1:])
if len(args) < 1:
    parser.print_help()
    sys.exit(45)

dryrun=options.dryrun
key=options.key
outdir=options.outdir

if outdir is not None:
    if not os.path.exists(outdir):
        os.makedirs(outdir)

if dryrun:
    stdout.write("Performing a dry run, no files will be created or moved\n")


xmlreg = re.compile( '.*\.xml$' )
for f in args:
    if xmlreg.match(f):
        fjson = f.replace('.xml','.json')
        stdout.write('%s -> %s\n' % (f, fjson))
        if not dryrun:
            data=xmltools.xml2dict(f, noroot=True)
            if key is not None:
                data=data[key]

            ju.write(data, fjson)
            
        if outdir is not None:
            newfile=os.path.basename(f)
            newfile=os.path.join(outdir, newfile)
            stdout.write('Moving xml file to:  %s\n' % newfile)
            if not dryrun:
                shutil.move(f, newfile)
