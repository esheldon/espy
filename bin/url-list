#!/usr/bin/env python
"""
    %prog [options] url

List all files at the url.

Note for full listings you may want to pipe the result to column

  url-list -l url | column -t
"""

import sys
import os
from optparse import OptionParser

import urllib2
from urlparse import urlparse

parser=OptionParser(__doc__)

parser.add_option("-l","--full",action="store_true", 
                  help="show a full listing.   This is much slower")
parser.add_option("-n","--netrc",action="store_true", 
                  help="use ~/.netrc for authentication")

class URLLister(object):
    def __init__(self, url, full=False, use_netrc=False):
        self.url=url
        self.full=full
        self.use_netrc=use_netrc

    def print_list(self):
        opener=self.get_opener()

        f = opener.open(self.url)
        for line in f:
            if 'Parent Directory' in line:
                continue
            elif '?' in line:
                continue
            elif 'href' in line:
                ls=(line.split('href="'))[1]
                fname=(ls.split('"'))[0]
                
                url=os.path.join(self.url, fname)
                if self.full:
                    self.print_full_info(opener, url)
                else:
                    print url

    def print_full_info(self, opener, url):
        sock=opener.open(url)
        info=sock.info()
        size=info.get('Content-Length')
        dt=info.get('Last-Modified')

        # can use this to parse
        #datetime.datetime.strptime(d,'%a, %d %b %Y %X %Z')


        print size,dt,url

    def get_opener(self):
        if self.use_netrc:
            authinfo=self.get_netrc_auth()
            # this proxy handler looks for $http_proxy
            opener = urllib2.build_opener(urllib2.ProxyBasicAuthHandler,authinfo)
        else:
            opener = urllib2.build_opener(urllib2.ProxyBasicAuthHandler)

        return opener

    def get_netrc_auth(self):
        import netrc


        host = urlparse(self.url).hostname
        (user,account,passwd) = netrc.netrc().authenticators(host)

        password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
        password_mgr.add_password(None, 
                                  self.url, 
                                  user, 
                                  passwd)

        authinfo = urllib2.HTTPBasicAuthHandler(password_mgr)

        return authinfo


def main():
    options, args = parser.parse_args(sys.argv[1:])

    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    url=args[0]

    try:
        lister=URLLister(url, full=options.full, use_netrc=options.netrc)
        lister.print_list() 
    except KeyboardInterrupt:
        pass

main()
