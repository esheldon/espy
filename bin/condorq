#!/usr/bin/env python


def main(match=None):
    try:
        print_queue(match=match)
    except KeyboardInterrupt:
        pass
    except BrokenPipeError:
        pass


COMMAND = """
condor_q \\
    -format '%d.' ClusterId \\
    -format '%-d,' ProcId \\
    -format '%-s,' Owner \\
    -format '%-s,' 'formatTime(QDate,"%m/%d %H:%M:%S")' \\
    -format '%-s,' 'RemoteWallClockTime' \\
    -format '%s,' ServerTime \\
    -format '%s' ShadowBday \\
    -format ',' Owner \\
    -format '%-s,' 'ifThenElse(JobStatus==0,"U",ifThenElse(JobStatus==1,"I",ifThenElse(JobStatus==2,"R",ifThenElse(JobStatus==3,"X",ifThenElse(JobStatus==4,"C",ifThenElse(JobStatus==5,"H",ifThenElse(JobStatus==6,"E",string(JobStatus))))))))' \\
    -format '%-d,' JobPrio \\
    -format '%-.2f,' MemoryUsage/1024 \\
    -format '%s,' Cmd \\
    -format '%s,' job_name \\
    -format '%s' RemoteHost \\
    -format '\\n' Owner"""  # noqa

#     -format '%-.1f,' ImageSize/1024.0 \\

MINUTE = 60
HOUR = MINUTE * 60
DAY = HOUR * 24

HEADERS = (
    "ID", "Owner", "Submitted", "Run Time", "ST", "Pri", "Mem", "Cmd",
    "Host",
)


def print_queue(match=None):

    out = get_condor_q_output()
    out = out.split("\n")

    stats = {"njobs": 0, "R": 0, "I": 0, "H": 0, "C": 0, "X": 0}
    lengths = {
        "id": 2,
        "owner": 5,
        "qdate": 9,
        "runtime": 8,
        "status": 2,
        "pri": 3,
        "mem": 4,
        "cmd": 3,
        "host": 4,
    }

    line_splits = []
    for line in out:
        if len(line) > 0:
            if match is not None:
                if match not in line:
                    continue
            stats["njobs"] += 1
            lsplit = process_line(line, stats, lengths, dolengths=True)
            line_splits.append(tuple(lsplit))

    write_statline(stats)
    write_job_listing(line_splits, lengths)
    write_statline(stats)


def write_job_listing(line_splits, lengths):
    from sys import stdout

    fmt = " %-" + str(lengths["id"]) + "s  "
    fmt += "%-" + str(lengths["owner"]) + "s  "
    fmt += "%-" + str(lengths["qdate"]) + "s  "
    fmt += "%-" + str(lengths["runtime"]) + "s  "
    fmt += "%-" + str(lengths["status"]) + "s  "
    fmt += "%-" + str(lengths["pri"]) + "s  "
    fmt += "%-" + str(lengths["mem"]) + "s  "
    fmt += "%-" + str(lengths["cmd"]) + "s  "
    fmt += "%-" + str(lengths["host"]) + "s"

    header = fmt % HEADERS
    stdout.write(header)
    stdout.write("\n")

    for ls in line_splits:
        line = fmt % ls
        stdout.write(line)
        stdout.write("\n")


def write_statline(stats):
    from sys import stdout

    stdout.write(" ")

    stdout.write("Jobs: ")

    stdout.write("%s " % stats["njobs"])

    stdout.write("Running: ")
    stdout.write("%s " % stats["R"])

    stdout.write("Idle: ")
    stdout.write("%s " % stats["I"])

    if stats["H"] > 0:
        stdout.write("Held: ")
        stdout.write("%s " % stats["H"])
    if stats["X"] > 0:
        stdout.write("Removed: ")
        stdout.write("%s " % stats["X"])
    if stats["C"] > 0:
        stdout.write("Completed: ")
        stdout.write("%s " % stats["C"])

    stdout.write("\n")


def process_line(line, stats, lengths, dolengths=True):
    """
    process the line and return a new line with
    the executable represented only as the basname,
    and rcf.bnl.gov removed from the slot name

    """
    import os

    ls = line.split(",")
    # print('len ls:', len(ls))
    # print(ls)

    if len(ls) == 11:
        (
            id,
            owner,
            qdate,
            remotewall,
            servertime,
            shadowbday,
            status,
            pri,
            mem,
            cmd,
            host,
        ) = ls
        if '@' not in host:
            # we have no job and no memory
            mem = '----'
            host = ''
        else:
            try:
                float(mem)
            except Exception:
                (
                    id,
                    owner,
                    qdate,
                    remotewall,
                    servertime,
                    shadowbday,
                    status,
                    pri,
                    cmd0,
                    job_name,
                    host,
                ) = ls
                mem = '----'

        cmd = os.path.basename(cmd)
    elif len(ls) == 12:
        # job_name was present
        (
            id,
            owner,
            qdate,
            remotewall,
            servertime,
            shadowbday,
            status,
            pri,
            mem,
            cmd0,
            job_name,
            host,
        ) = ls
        cmd = job_name
    else:
        raise ValueError(
            "Expected 10 or 11 results from condor_q, got %d" % len(ls)
        )

    host = host.split(".")[0]

    total_wall_time = int(float(remotewall))

    if status in stats:
        stats[status] += 1

    if status == "R" and shadowbday != "":
        total_wall_time += int(servertime) - int(shadowbday)
    runtime = format_time(total_wall_time)

    if dolengths:
        lengths["id"] = max(len(id), lengths["id"])
        lengths["owner"] = max(len(owner), lengths["owner"])
        lengths["qdate"] = max(len(qdate), lengths["qdate"])
        lengths["runtime"] = max(len(runtime), lengths["runtime"])
        lengths["status"] = max(len(status), lengths["status"])
        lengths["pri"] = max(len(pri), lengths["pri"])
        lengths["mem"] = max(len(mem), lengths["mem"])
        lengths["cmd"] = max(len(cmd), lengths["cmd"])
        lengths["host"] = max(len(host), lengths["host"])

    return id, owner, qdate, runtime, status, pri, mem, cmd, host


def format_time(tot_seconds):
    import datetime

    if tot_seconds == 0:
        return "----------"
    sec = datetime.timedelta(seconds=tot_seconds)
    d = datetime.datetime(1, 1, 1) + sec

    return "%d+%02d:%02d:%02d" % (d.day - 1, d.hour, d.minute, d.second)


def get_condor_q_output():
    import subprocess

    pobj = subprocess.Popen(
        COMMAND,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True,
    )
    stdout_ret, stderr_ret = pobj.communicate()
    return stdout_ret.decode("utf-8")


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-m', '--match', help='only show jobs that contain the input string',
    )
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    main(match=args.match)
