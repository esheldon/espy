#!/usr/bin/env python

import sys
from sys import stderr, stdout
import numpy
import fitsio
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('filename')

parser.add_argument(
    '-e', '--ext',
    help=('print the given extension'),
)

parser.add_argument(
    '-c', '--columns',
    help=('A comma-separated list of columns to print. '
          'Can be numerical or strings.')
)
parser.add_argument(
    '-n', '--nrows',
    type=int,
    help='The number of rows to print.',
)

parser.add_argument(
    '-d', '--delim',
    default=' ',
    help=('The delimiter to be used between fields.  '
          'Default is a space.'),
)
parser.add_argument(
    '-H', '--header',
    action='store_true',
    help='Write a simple header with column names',
)

parser.add_argument(
    '-w', '--where',
    default=None,
    help=('limit to rows that satisfy the input expression '
          'note this requires running through the entire table first '
          'and enough memory to hold the corresponding index array'),
)


def get_ext(extin):
    """
    get the extension to read
    """
    if extin is None:
        ext = 0
    else:
        try:
            ext = int(extin)
        except ValueError:
            ext = extin

    return ext


def get_columns(hdu, columns):
    """
    get the column names or numbers
    """
    if columns is not None:
        columns = columns.split(',')
        columns = [c.lower() for c in columns]
    else:
        columns = hdu.get_colnames()

    return columns


def format_val(val):
    """
    format a value for printing
    """
    if isinstance(val, str):
        out = '"%s"' % val
    else:
        if 'float' in val.dtype.name:
            if val.dtype.itemsize >= 8:
                out = '%.16g' % val
            else:
                out = '%.7g' % val
        else:
            out = '%s' % val

    return out


def print_val(val):
    """
    print a value
    """
    if isinstance(val, str):
        stdout.write('"%s"' % val)
    else:
        if 'float' in val.dtype.name:
            if val.dtype.itemsize >= 8:
                stdout.write('%.16g' % val)
            else:
                stdout.write('%.7g' % val)
        else:
            stdout.write('%s' % val)


def print_header(data, names, delim):
    """
    print a simple header
    """
    ncol = len(names)
    for j, n in enumerate(names):
        if data[n][0].ndim > 0:
            nv = data[n][0].size
            for k in range(nv):
                np = '%s%d' % (n, k)
                print_val(np)
                if k < (nv-1):
                    stdout.write('%s' % delim)
        else:
            print_val(n)
        if j < (ncol-1):
            stdout.write('%s' % delim)
    stdout.write('\n')


def print_simple(data, names, delim, do_header=False):
    """
    print the table
    """

    if do_header:
        print_header(data, names, delim)

    for i in range(data.size):
        row = []
        for j, n in enumerate(names):
            if data[n][i].ndim > 0:
                for v in data[n][i, :].flat:
                    fval = format_val(v)
                    row.append(fval)
            else:
                fval = format_val(data[n][i])
                row.append(fval)

        row[-1] += '\n'
        line = delim.join(row)
        stdout.write(line)


def main():
    args = parser.parse_args(sys.argv[1:])

    ext = get_ext(args.ext)

    do_header = args.header
    wstring = args.where
    nrows2print = args.nrows

    with fitsio.FITS(args.filename, lower=True) as fobj:
        hdu = fobj[ext]
        nrows = hdu.get_nrows()

        if wstring is not None:
            w = hdu.where(wstring)
            if w.size == 0:
                return
            nrows = w.size

        colnames = get_columns(hdu, args.columns)

        if nrows2print is not None:
            nrows2print = int(nrows2print)
            if nrows2print < nrows:
                nrows = nrows2print

        nperchunk = 1000
        nchunk = nrows//nperchunk

        nmod = nrows % nperchunk
        if nmod > 0:
            nchunk += 1

        if nchunk == 0:
            nchunk = 1

        for i in range(nchunk):
            i1 = i*nperchunk
            i2 = (i+1)*nperchunk
            if i2 > nrows:
                i2 = nrows

            rows = numpy.arange(i1, i2)
            if wstring is not None:
                rows = w[rows]

            data = hdu.read(rows=rows, columns=colnames)

            if i > 0:
                do_header = False

            # catch a particular type of error: broken pipe.
            # this is a python bug which occurs when sending
            # the output through a pipe
            try:
                print_simple(
                    data,
                    colnames,
                    args.delim,
                    do_header=do_header,
                )
            except IOError as err:
                if err.errno == 32:
                    pass
                else:
                    stderr.write("Unexpected error:%s\n" % sys.exc_info()[0])
                    sys.exit(1)
            del data


main()
