#!/usr/bin/env python

def get_args():
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-o', '--output',
        help='file to write; default is to show the plot on the screen'
    )
    parser.add_argument(
        '--binsize', type=float, help='size of bins'
    )
    parser.add_argument(
        '--bins', type=int, help='number of bins for histogram'
    )

    parser.add_argument('--xlabel', help='label for x axis')
    parser.add_argument('--ylabel', help='label for y axis')
    parser.add_argument('--title', help='title for plot')
    parser.add_argument('--xlim', nargs=2, help='xmin and xmax')
    parser.add_argument('--ylim', nargs=2, help='ymin and ymax')
    parser.add_argument(
        '--ylog', action='store_true', help='use log axis for y'
    )
    parser.add_argument(
        '--aspect', type=float, default=1.618,
        help='aspect ratio ysize/xsize for plot'
    )
    parser.add_argument(
        '--width', type=float, default=3.5,
        help='width of plot'
    )
    parser.add_argument(
        '--dpi', type=int, default=90,
        help='dpi when writing images like png'
    )

    parser.add_argument(
        '--min', type=float, help='min allowed data in histogram'
    )
    parser.add_argument(
        '--max', type=float, help='max allowed data in histogram'
    )

    parser.add_argument('--color', help='color of histogram')

    return parser.parse_args()


def read_data(args):
    import numpy as np
    import sys

    data = []
    for line in sys.stdin:
        ls = line.split()
        data += [float(val) for val in ls]

    data = np.array(data)

    if args.min is not None or args.max is not None:
        if args.min is not None:
            logic = (data >= args.min)
        if args.max is not None:
            logic = (data <= args.max)
        data = data[logic]

    return data


def go(args):
    from espy.plotting import plot_hist

    data = read_data(args)

    kw = {'file': args.output}

    if args.bins is not None:
        kw['bins'] = args.bins
    elif args.binsize is not None:
        kw['binsize'] = args.binsize

    plot_hist(
        data,
        xlabel=args.xlabel,
        ylabel=args.ylabel,
        title=args.title,
        xlim=args.xlim,
        ylim=args.ylim,
        ylog=args.ylog,
        aspect=args.aspect,
        width=args.width,
        dpi=args.dpi,
        **kw
    )


def main():
    args = get_args()
    go(args)


if __name__ == '__main__':
    main()
