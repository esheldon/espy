#!/usr/bin/env python
"""
    %prog [options] product [version]

Description:

    Make an image gallery for the input image list.  All files in the image
    list should be in the current working directory.  
    
    A subdirectory of the current working directory is made called
    "images2html" and all thumbnails, reduced images, and html files other than
    the index.html are stored there.  
    
    The index.html just redirects to images2html/index01.html
    
"""
import os
import sys
import re
from PIL import Image
from optparse import OptionParser

default_thumb_dims = (200,200)
default_reduced_dims = (800,800)
default_index_dims = (3,3)

parser=OptionParser(__doc__)
parser.add_option("-o","--overwrite", action="store_true", default=False, 
                  help="Overwrite thumbs/reduced, default %default")
parser.add_option("--thumb-dims", default=default_thumb_dims, 
                  help="Thumbnail size, default %default")
parser.add_option("--reduced-dims", default=default_reduced_dims, 
                  help="Reduced image size, default %default")
parser.add_option("--index-dims", default=default_index_dims, 
                  help="nrows,ncols in index pages, default %default")

def gallery_dir():
    return './gallery'

def make_gallery_dir():
    if not os.path.exists(gallery_dir()):
        os.makedirs(gallery_dir())

_gallery_css='images2html.css'

def write_gallery_css():
    f=os.path.join(gallery_dir(), _gallery_css)
    with open(f,'w') as fobj:
        fobj.write(_stylesheet)

_stylesheet="""
    /* Colors used: 
        #595B30  A kind of brown for the main text color
        #F0E68C  Khaki for the main background
        #898B60  A tannish color for nav background a few others
        #ffe4c4  bisque. visited links in navigation bar
    */

    /******************************************/
    /* Styling rules for the body             */
    /******************************************/

    html,body 
    {
      margin:0;

      /*color:#595B30;*/      /* A kind of brown */
      color:#898B60;
      background:#000000; /* khaki; */
    }

    /*
    a:link {color:#595B30; text-decoration:none}
    a:visited {color:#595B30; text-decoration:none}
    */
    a:link {color:#898B60 ; text-decoration:none}
    a:visited {color:#898B60 ; text-decoration:none}
    a:hover {text-decoration:underline}

    /*-----------------------------------------------*/
    /* The main content, with absolute positioning   */
    /*-----------------------------------------------*/

    /*
    #content 
    {
      position:absolute;
      top:3em;
      left:8em;
    }
    */

    /*-----------------------------------------------*/
    /* A navigation bar will be on the left          */
    /*-----------------------------------------------*/

    #navigation 
    {
      width:8em;
      height:100%;
      padding:0.5em;

      background:#000000; /* A tannish color */
    }

    #navigation hr { display:none }
    #navigation h2 { color:#595B30 }
    #navigation a:link {color:white}
    #navigation a:visited {color:#ffe4c4} /* bisque */


    /*--------------------------------------------------------*/
    /* A class for the main table division on the index pages */
    /*--------------------------------------------------------*/

    .thumbtable 
    {
      display:table; 
      border-collapse:separate;

      margin:10px auto;


      /*
      width:640px;
      height:480px;
      */
      width:800px;
      height:600px;

      /* this puts a background, and the border spacing, combined with 
         a background color of the td's, creates the border. I switched to
         putting an actual border on, see the row div.td */
      /*border-spacing:2px;*/
      /*background:#898B60;*/
    }

    .thumbname 
    { 
      font-style:italic;
      font-size:small;

      color:#898B60;
    }

    /*-----------------------------------------------*/
    /* rows and data classes                         */
    /*-----------------------------------------------*/

    .row 
    {
      display:table-row;
    }

    .row div 
    {
      display:table-cell;
      border-spacing:2px;
      height:33%; 

      background:#000000;

    }

    /* td is a subclass I guess */

    .row div.td 
    {
      text-align:center;
      vertical-align:middle;
      width:25%;

      /* these replace the effect of border-spacing and background in
         the main thumbtable. Better, since \"missing\" images are filled
         with the body background */
      border: 1px #898B60 solid;
    }

    .row div.td img { border-color:#595B30 }

    /*-----------------------------------------------*/
    /* A class for the bottom \"previous\" and \"next\"  */
    /* index                                         */
    /*-----------------------------------------------*/

    .prevNext 
    {  
      margin-left:auto;
      margin-right:auto;
      margin-top:0px;
      margin-bottom:0px;
      /*width:640px;*/
      width:100%;
      /*border: 2px black solid;*/
      /*height:5em;*/
    }

    .prevNextRow 
    {  
      display:table-row;
    }

    .prevNextRow div
    { 
      display:table-cell;
    }

    .prevNextRow div.prevtd
    {  
      /*border: red 2px solid;*/
      width:100%;
      text-align:left;
      font-style:italic;
    }
    .prevNextRow div.nexttd
    {  
      /*border: red 2px solid;*/
      width:100%;
      text-align:right;
      font-style:italic;
    }

    .prevNextRow div.firstlast
    {  
      /*border: red 2px solid;*/
      width:100%;
      text-align:center;
      font-style:italic;
    }


    .prevNextRow div.previmgtd
    {  
      /* border: red 2px solid; */
      width:50%;
      text-align:right;
      font-style:italic;
    }

    .prevNextRow div.toindextd
    {  
      /* border: red 2px solid; */
      width:1%;
      text-align:center;
      font-style:italic;
    }

    .prevNextRow div.nextimgtd
    {  
      /* border: red 2px solid; */
      width:50%;
      text-align:left;
      font-style:italic;
    }





    /*-----------------------------------------------*/
    /* A class for containing the images             */
    /*-----------------------------------------------*/

    .imagetable 
    {
      display:table; 
      border-collapse:separate;

      margin:10px auto;
      border-spacing:2px;
      font-style:italic;
    }

    .imagetable img { border-color:#898B60 }

"""


_imhtml="""<html>
<!-- Created by images2html Erin Sheldon -->
<head>
    <link rel="STYLESHEET" type="text/css" href="{css_url}">
</head>
    
<body>
    
    <div id="content">

        <div class="imagetable">


            <div class="prevNext">
                <div class="prevNextRow">
                    <div class="previmgtd">
                        {prev_atag} |
                    </div>
                    <div class="toindextd">
                        {index_atag}
                    </div>
                    <div class="nextimgtd">
                        | {next_atag}
                    </div>
                </div>
            </div>


	        <a href="{next_image_name}"><img src="{reduced_name}"></a>
            <br>
            {image_name}




        </div>


    </div>

"""
_imhtml_old="""<html>
<!-- Created by images2html Erin Sheldon -->
<head>
    <link rel="STYLESHEET" type="text/css" href="{css_url}">
</head>
    
<body>
    
    <div id="content">

        <div class="imagetable">


            <div class="prevNext">
                <div class="prevNextRow">
                    <div class="prevtd">
                        {prev_atag}
                    </div>
                    <div class="firstlast">
                        {index_atag}
                    </div>
                    <div class="nexttd">
                        {next_atag}
                    </div>
                </div>
            </div>


	        <a href="{next_image_name}"><img src="{reduced_name}"></a>
            <br>
            {image_name}




        </div>


    </div>

"""

def make_reduced_image(imfile, dims, newfile):

    new_totpix = dims[0]+dims[1]

    image = Image.open(imfile)
    osx, osy = image.size

    totpix = osx+osy

    if totpix > new_totpix:
        image.thumbnail(dims, Image.ANTIALIAS ) 
        print 'writing',newfile
        image.save(newfile)
    else:
        print 'Image',imfile,' is smaller than requested size. Linking'
        os.symlink(imfile, newfile)


class ImagePage(dict):
    def __init__(self, image, prev_image, next_image, index_id, thumb_dims, reduced_dims):
        self.image=image
        self.thumb_dims=thumb_dims
        self.reduced_dims=reduced_dims

        self.prev_image=prev_image
        self.next_image=next_image
        self.index_id=index_id
        

    def altname(self, imfile, type):
        if imfile is None:
            return None

        dir, base = os.path.split(imfile)
        front, ext = os.path.splitext(base)

        if type == 'html':
            altname = '{front}.html'.format(front=front)
        else:
            altname = '{front}-{type}{ext}'.format(front=front,type=type,ext=ext)
        return altname

    def make_thumb_and_reduced(self, overwrite=False):
        f=os.path.join(gallery_dir(), self.altname(self.image,'thumb'))
        if not os.path.exists(f) or overwrite:
            make_reduced_image(self.image, self.thumb_dims, f)

        f=os.path.join(gallery_dir(), self.altname(self.image,'reduced'))
        if not os.path.exists(f) or overwrite:
            make_reduced_image(self.image, self.reduced_dims, f)


    def prev_atag(self):
        html_name=self.altname(self.prev_image, 'html')
        if html_name is None:
            return ""
        return '<a href="%s">&lt;Back</a>' % html_name

    def next_atag(self):
        html_name=self.altname(self.next_image, 'html')
        if html_name is None:
            return ""
        return '<a href="%s">Next&gt;</a>' % html_name

    def html_file(self):
        html_name=self.altname(self.image, 'html')
        html_file = os.path.join(gallery_dir(), html_name)
        return html_file

    def index_atag(self):
        index_html = 'index%02d.html' % self.index_id
        index_atag = '<a href="%s">Index</a>' % index_html
        return index_atag
    def write(self):
        html_file=self.html_file()
        with open(html_file,'w') as fobj:
            pagetext=_imhtml.format(css_url=_gallery_css,
                                    image_name=self.image,
                                    reduced_name=self.altname(self.image, 'reduced'),
                                    prev_atag=self.prev_atag(),
                                    next_atag=self.next_atag(),
                                    next_image_name=self.next_image,
                                    index_atag=self.index_atag())

            fobj.write(pagetext)



class Index:
    def __init__(self, id, thumb_dims, reduced_dims):
        self.id=id
        self.thumb_dims=thumb_dims
        self.reduced_dims=reduced_dims
        self.image_pages = []

        # number of image columns in index
        # for now, this is pre-determined and number of rows
        # is not constrained
        self.ncol = 3

    def add_page(self, image, prev_image, next_image):
        image_page = ImagePage(image, prev_image, next_image, 
                               self.id, self.thumb_dims, self.reduced_dims)
        self.image_pages.append(image_page)

    def make_thumbs_and_reduced(self, overwrite=False):
        for p in self.image_pages:
            p.make_thumb_and_reduced(overwrite=overwrite)

    def write(self):
        for page in self.image_pages:
            page.write()

class Gallery:
    def __init__(self, images, **keys):
        self.images = images

        self.thumb_dims = keys.get('thumb_dims', default_thumb_dims)
        self.reduced_dims = keys.get('reduced_dims', default_reduced_dims)
        self.index_dims = keys.get('index_dims', default_index_dims)

        self.nperindex = self.index_dims[0]*self.index_dims[1]

        self.init()

    def init(self):

        self.indexes=[]

        nim = len(self.images)
        index_id=-1
        index_old=-1
        for i in xrange(nim):

            im=self.images[i]
            if (i % self.nperindex) == 0:
                index_id += 1
                index = Index(index_id, self.thumb_dims, self.reduced_dims)
                self.indexes.append(index)

            if i == 0:
                prev_image=None
                next_image=self.images[i+1]
            elif i == (nim-1):
                prev_image=self.images[i-1]
                next_image=None
            else:
                prev_image=self.images[i-1]
                next_image=self.images[i+1]

            index.add_page(im, prev_image, next_image)

    def make_thumbs_and_reduced(self, overwrite=False):
        for index in self.indexes:
            index.make_thumbs_and_reduced(overwrite=overwrite)



    def write(self):
        for index in self.indexes:
            index.write()


def option2tuple(option):
    if isinstance(option, tuple):
        return option
    l = option.split(',')
    return tuple( [int(i) for i in l] )

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) == 0:
        parser.print_help()
        sys.exit(45)

    images=args[:]

    thumb_dims = option2tuple(options.thumb_dims)
    reduced_dims = option2tuple(options.reduced_dims)
    index_dims = option2tuple(options.index_dims)
    overwrite=options.overwrite

    gmaker = Gallery(images, 
                     thumb_dims=thumb_dims, 
                     reduced_dims=reduced_dims, 
                     index_dims=index_dims)


    make_gallery_dir()
    write_gallery_css()

    gmaker.make_thumbs_and_reduced(overwrite=overwrite)
    gmaker.write()


main()


