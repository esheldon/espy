#!/usr/bin/env python
"""
    %prog [options] script1 script2 script3 ...
"""
from __future__ import print_function

import socket
import sys
from sys import stderr
import yaml
import os
import signal 
import subprocess
import time
import datetime
from optparse import OptionParser

import wq


parser=OptionParser(__doc__)
parser.add_option("-p","--port", default=None, help="port for socket")
parser.add_option("--poll", default=30,
        help=("time between polls of wq status when we are at max allowed"
              "jobs, default %default"))
parser.add_option("-r","--req",default=None,help="over-ride requirements")
parser.add_option("-n", "--njobs", default=1000, 
                  help="max number of jobs, default %default")
parser.add_option("-s", "--sleep-time", default=.2, 
                  help=("minimum time to sleep between individual submisions."
                        "default %default"))
parser.add_option("-f", "--force", action="store_true",
                  help="force starting of all jobs, even if a log file is present.")

parser.add_option("-d", "--dryrun", action='store_true', 
                  help="dry run.  Just print number of jobs and exit.")

parser.add_option("--rand", action="store_true",help="randomize the order of files")

pars={'host':wq.DEFAULT_HOST,      # Symbolic name meaning all available interfaces
      'port':wq.DEFAULT_PORT,
      'max_buffsize':wq.DEFAULT_MAX_BUFFSIZE}


def socket_connect(sock, conninfo, crash_on_timeout=False):
    # crash will only happen if timeouts have been enabled, otherwise we just
    # wait
    if crash_on_timeout:
        sock.connect(conninfo)
    else:
        while True:
            try:
                sock.connect(conninfo)
                break
            except socket.timeout:
                pass


def send_message(message, timeout=None, crash_on_timeout=False):
    if len(message) == 0:
        raise ValueError("message must have len > 0")

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # make sure to set timeout *before* calling connect()
    if timeout is not None:
        sock.settimeout(timeout)

    conninfo = (pars['host'], pars['port'])
    socket_connect(sock, conninfo, crash_on_timeout=crash_on_timeout)

    rdict=None
    try:
        jmess=yaml.dump(message)

        wq.server.socket_send(sock, jmess)
        data = wq.server.socket_recieve(sock, pars['max_buffsize'])

        sock.close()

        try:
            rdict = yaml.load(data)
        except:
            print( 'YAML err:' )
            print( data )
            sys.exit(1)

        if 'error' in rdict:
            raise RuntimeError("Error reported by server: %s" % rdict['error'])

        if 'response' not in rdict:
            raise RuntimeError("Internal error. Expected a response and got screwed.")

    except:
        es=sys.exc_info()
        print( 'caught exception type:', es[0],'details:',es[1] )
        rdict=None
    finally:
        sock.close()

    if rdict is None:
        sys.exit(1)

    return rdict



class JobLister(dict):
    """
    usage: wq ls [options]

    print the job list to stdout.  
    
    If -u/--user is sent, the listing is restricted to that user/users.

    If -f/--full is sent, the full job listing is given.  This is a yaml
    document that can be read and processed to provide a customised listing.\n"""

    def __init__(self, user):
        self.user=user
        self.execute()
    def execute(self):
        message={}
        message['command'] = 'ls'
        while True:
            try:
                resp = send_message(message)
                break
            except:
                print("error listing jobs, trying again after 30 seconds")
                time.sleep(30)

        self.jobs = [r for r in resp['response'] if r['user'] == self.user]
        self.njobs = len(self.jobs)

def get_log_fname(fname):
    return fname+'.wqlog'

def submit_job(job_fname, req):
    """
    Put the job in the background

    Use os.system because it disconnects from
    the python script
    """
    log_fname = get_log_fname(job_fname)
    command="""
        nohup wq -p "{port}" sub {req} "{jobf}" 2>&1 > "{logf}" &
    """.format(port=pars['port'],
               jobf=job_fname,
               logf=log_fname,
               req=req)
    os.system(command)
   

def get_req(options):
    if options.req:
        req = """ -r "%s" """ % options.req
    else:
        req=""

    return req

def randomize_flist(flist):
    import random
    d={}
    for f in flist:
        d[random.randint(0,2000000000)] = f
    return [d[k] for k in d]

def go(flist, options):

    nfiles=len(flist)
    maxjobs=int(options.njobs)
    polltime=int(options.poll)
    sleep_time=float(options.sleep_time)

    req=get_req(options)
    if options.rand:
        flist=randomize_flist(flist)

    user=os.environ['USER']

    print("submitting jobs for user: %s" % user)
    print("number in list:           %s" % len(flist))
    print("will limit to maxjobs:    %s" % maxjobs)
    if options.dryrun:
        return

    diffjobs=0
    for i,fname in enumerate(flist):
        perc=100.*(i+1)/float(nfiles)

        logf=get_log_fname(fname)
        if not os.path.exists(logf) or options.force:
            if diffjobs <= 0:
                lister=JobLister(user)
                diffjobs = maxjobs - lister.njobs
                while diffjobs <= 0:
                    time.sleep(polltime)
                    lister=JobLister(user)
                    diffjobs = maxjobs - lister.njobs
                print("Found %s jobs diffjobs: %s" % (lister.njobs,diffjobs))

            date = datetime.datetime.now().strftime('%H:%M:%S')
            print("    submitting %s %s %s/%s (%i%%)" % (fname,date,i+1,nfiles,perc))
            submit_job(fname,req)

            diffjobs -= 1

            # this helps when the file system is slow
            #os.system('wq 1> /dev/null 2> /dev/null')

            # minimum time in case above is fast
            time.sleep(sleep_time)


def main():
    """
    Just to provide a clean exit when we get keyboard interrupts
    """

    try:
        options, flist = parser.parse_args(sys.argv[1:])

        if len(flist) == 0:
            parser.print_help()
            sys.exit(1)

        if options.port is not None:
            pars['port'] = int(options.port)

        go(flist, options)
    except KeyboardInterrupt:
        sys.exit(1)



main()
