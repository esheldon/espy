#!/usr/bin/env python
"""
    %prog [options] chunksize l1 l2 l3 l4 ...

Description:

    Splits the input list into chunks and writes out files containing the
    elements.  By default the files are called chunkN.txt where N is a 
    zero-padded string representing the chunk number.  The zero padding is
    always long enough to represent the numbers correctly.

"""

import sys
from optparse import OptionParser

parser=OptionParser(__doc__)
parser.add_option("--prefix","-p",dest="prefix",
                  default="./chunk",
                  help="prefix for file names.  Default is '%default'")
parser.add_option("--suffix","-s",dest="suffix",
                  default=".txt",
                  help="suffix for file names.  Default is '%default'")
parser.add_option("--pbs",dest="pbs",
                  default=False,
                  action='store_true',
                  help="Assume list is names of pbs files. Default is %default")

def split_list(els, chunksize, prefix, suffix, pbs=False):
    nchunks = len(els) / chunksize
    nleft = len(els) % chunksize

    if nleft > 0:
        nchunks += 1

    cformat = '%0'+str(len(str(nchunks)))+'i'
    name_format = prefix+cformat+suffix

    for i in range(nchunks):
        # loop over chunks
        i1 = i*chunksize
        i2 = (i+1)*chunksize

        thischunk = els[i1:i2]

        fname = name_format % i

        print(fname)
        fobj = open(fname, 'w')

        # now write elements for this chunk to the file
        j=0
        for el in thischunk:
            if pbs:
                # we will write the qsub calls 
                fobj.write('echo -n "%s/%s %s "\n' % (j+1,len(thischunk),el))
                fobj.write('qsub ')
                j+=1
            fobj.write(el)
            fobj.write('\n')
        fobj.close()


def main():
    options, args = parser.parse_args(sys.argv[1:])

    narg = len(args)
    if narg < 2:
        parser.print_help()
        sys.exit(45)

    prefix=options.prefix
    suffix=options.suffix
    pbs=options.pbs
    if pbs:
        suffix = '.sh'

    chunksize = int(args[0])
    els = args[1:]

    split_list(els, chunksize, prefix, suffix, pbs=pbs)

if __name__=='__main__':
    main()
