#!/usr/bin/env python

import os
import subprocess

import curses
from curses import wrapper as curses_wrapper


def main(refresh, background, match):
    try:
        CondorWatcher(refresh=refresh, background=background, match=match)
    except KeyboardInterrupt:
        pass


class CondorWatcher:
    def __init__(self, refresh, background, match):

        # in minutes
        self.refresh = refresh
        self.background = background
        self.match = match

        self.command = COMMAND

        self.MINUTE = 60
        self.HOUR = self.MINUTE * 60
        self.DAY = self.HOUR * 24

        self.headers = (
            "ID",
            "Owner",
            "Submitted",
            "Run Time",
            "ST",
            "Pri",
            "Mem",
            "Cmd",
            "Host",
        )
        curses_wrapper(self.condor_watch)

    def condor_watch(self, stdscr):

        self.setup_windows(stdscr)

        # wait for refresh seconds for user input before refreshing.  If the
        # user input is anything but 'q' then refresh again

        tout_ms = self.refresh * 60 * 1000
        self.win1.timeout(tout_ms)
        while 1:
            self.win1.erase()
            self.win2.erase()
            self.win3.erase()

            out = self.get_condor_q_output()
            out = out.split("\n")

            stats = {
                "njobs": 0, "R": 0, "r": 0, "I": 0, "H": 0, "C": 0, "X": 0,
            }
            # lengths={'id':9,'owner':12,'qdate':11,'runtime':12,
            #         'status':2,'pri':3,'size':7,'cmd':3,'host':4}
            lengths = {
                "id": 2,
                "owner": 5,
                "qdate": 9,
                "runtime": 8,
                "status": 2,
                "pri": 3,
                # "size": 4,
                "mem": 3,
                "cmd": 3,
                "host": 4,
            }

            # nprint = min(len(out), self.maxy3)
            nprint = min(len(out), self.maxy3 - 1)
            line_splits = []
            for ii in range(len(out)):
                line = out[ii]
                if len(line) > 0:

                    if self.match is not None:
                        if self.match not in line:
                            continue

                    stats["njobs"] += 1
                    lsplit = self.process_line(
                        line, stats, lengths, dolengths=(ii < nprint)
                    )
                    if ii < nprint:
                        line_splits.append(tuple(lsplit))

            self.write_statline(stats)
            self.write_job_listing(line_splits, lengths)

            c = self.win1.getch()
            if c == ord("q"):
                break

    def write_job_listing(self, line_splits, lengths):

        fmt = " %-" + str(lengths["id"]) + "s  "
        fmt += "%-" + str(lengths["owner"]) + "s  "
        fmt += "%-" + str(lengths["qdate"]) + "s  "
        fmt += "%-" + str(lengths["runtime"]) + "s  "
        fmt += "%-" + str(lengths["status"]) + "s  "
        fmt += "%-" + str(lengths["pri"]) + "s  "
        fmt += "%-" + str(lengths["mem"]) + "s  "
        fmt += "%-" + str(lengths["cmd"]) + "s  "
        fmt += "%-" + str(lengths["host"]) + "s"

        header = fmt % self.headers
        self.win2.addstr(0, 0, header[0: self.maxx2 - 1])

        for ii in range(len(line_splits)):
            ls = line_splits[ii]
            line = fmt % ls
            self.win3.addstr(ii, 0, line[0: self.maxx3 - 1])
        self.win2.refresh()
        self.win3.refresh()

    def setup_windows(self, stdscr):
        self.make_color_pairs()
        self.set_colors()

        self.maxy, self.maxx = stdscr.getmaxyx()

        x0 = 0

        # the stats
        y1 = 0
        sizey1 = 3
        self.win1 = curses.newwin(sizey1, self.maxx, y1, x0)

        # the header line
        sizey2 = 1
        y2 = sizey1
        self.win2 = curses.newwin(sizey2, self.maxx, y2, x0)

        self.win3 = curses.newwin(
            self.maxy - sizey1 - sizey2, self.maxx, sizey1 + sizey2, x0
        )
        self.maxy2, self.maxx2 = self.win2.getmaxyx()
        self.maxy3, self.maxx3 = self.win3.getmaxyx()

    def write_statline(self, stats):

        win = self.win1

        win.erase()
        colors = self.colors

        win.addstr(1, 0, " ")

        win.addstr("Jobs: ", colors["njobs"])

        win.addstr("%s " % stats["njobs"])

        win.addstr("Running: ", colors["R"])
        win.addstr("%s " % stats["R"])
        win.addstr("Reserved: ", colors["r"])
        win.addstr("%s " % stats["r"])

        win.addstr("Idle: ", colors["I"])
        win.addstr("%s " % stats["I"])

        if stats["H"] > 0:
            win.addstr("Held: ", colors["H"])
            win.addstr("%s " % stats["H"])
        if stats["X"] > 0:
            win.addstr("Removed: ", colors["X"])
            win.addstr("%s " % stats["X"])
        if stats["C"] > 0:
            win.addstr("Completed: ", colors["C"])
            win.addstr("%s " % stats["C"])

        win.refresh()

    def process_line(self, line, stats, lengths, dolengths=True):
        """
        process the line and return a new line with
        the executable represented only as the basname,
        and rcf.bnl.gov removed from the slot name

        """
        ls = line.split(",")

        if len(ls) == 11:
            (
                id,
                owner,
                qdate,
                remotewall,
                servertime,
                shadowbday,
                status,
                pri,
                mem,
                cmd,
                host,
            ) = ls

            if '@' not in host:
                # we have no job and no memory
                mem = '----'
                host = ''
            else:
                try:
                    float(mem)
                except Exception:
                    (
                        id,
                        owner,
                        qdate,
                        remotewall,
                        servertime,
                        shadowbday,
                        status,
                        pri,
                        cmd0,
                        job_name,
                        host,
                    ) = ls
                    mem = '----'

            cmd = os.path.basename(cmd)

        elif len(ls) == 12:
            # job_name was present
            (
                id,
                owner,
                qdate,
                remotewall,
                servertime,
                shadowbday,
                status,
                pri,
                mem,
                cmd0,
                job_name,
                host,
            ) = ls
            cmd = job_name
        else:
            raise ValueError(
                "Expected 10 or 11 results from condor_q, got %d" % len(ls)
            )

        cmd = os.path.basename(cmd)
        host = host.split(".")[0]

        total_wall_time = int(float(remotewall))

        if status == "R" and shadowbday != "":
            total_wall_time += int(servertime) - int(shadowbday)
        runtime = self.format_time(total_wall_time)

        if status == "R":
            if "-" in runtime:
                stats["r"] += 1
            else:
                status = "R"
                stats["R"] += 1
        else:
            if status in stats:
                stats[status] += 1

        if dolengths:
            lengths["id"] = max(len(id), lengths["id"])
            lengths["owner"] = max(len(owner), lengths["owner"])
            lengths["qdate"] = max(len(qdate), lengths["qdate"])
            lengths["runtime"] = max(len(runtime), lengths["runtime"])
            lengths["status"] = max(len(status), lengths["status"])
            lengths["pri"] = max(len(pri), lengths["pri"])
            lengths["mem"] = max(len(mem), lengths["mem"])
            lengths["cmd"] = max(len(cmd), lengths["cmd"])
            lengths["host"] = max(len(host), lengths["host"])

        return id, owner, qdate, runtime, status, pri, mem, cmd, host
        return {
            "id": id,
            "owner": owner,
            "qdate": qdate,
            "runtime": runtime,
            "status": status,
            "pri": pri,
            "mem": mem,
            "cmd": cmd,
            "host": host,
        }

    def format_time(self, tot_seconds):
        import datetime

        if tot_seconds == 0:
            return "----------"
        sec = datetime.timedelta(seconds=tot_seconds)
        d = datetime.datetime(1, 1, 1) + sec

        return "%d+%02d:%02d:%02d" % (d.day - 1, d.hour, d.minute, d.second)

    def get_condor_q_output(self):

        pobj = subprocess.Popen(
            self.command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            shell=True
        )
        stdout_ret, stderr_ret = pobj.communicate()
        return stdout_ret.decode("utf-8")

    def make_color_pairs(self):
        curses.use_default_colors()
        curses.init_pair(default, -1, -1)
        bkgd_color = -1

        curses.init_pair(black, curses.COLOR_BLACK, bkgd_color)
        curses.init_pair(red, curses.COLOR_RED, bkgd_color)
        curses.init_pair(green, curses.COLOR_GREEN, bkgd_color)
        curses.init_pair(yellow, curses.COLOR_YELLOW, bkgd_color)
        curses.init_pair(blue, curses.COLOR_BLUE, bkgd_color)
        curses.init_pair(magenta, curses.COLOR_MAGENTA, bkgd_color)
        curses.init_pair(cyan, curses.COLOR_CYAN, bkgd_color)
        curses.init_pair(white, curses.COLOR_WHITE, bkgd_color)

    def set_colors(self):
        self.colors = {}
        if self.background == "light":
            self.colors["njobs"] = curses.color_pair(blue)
            self.colors["queue"] = curses.color_pair(blue)

            self.colors["R"] = curses.color_pair(green)
            self.colors["r"] = curses.color_pair(cyan)

            self.colors["I"] = curses.color_pair(magenta)
            self.colors["H"] = curses.color_pair(red)
            self.colors["X"] = curses.color_pair(red)
            self.colors["C"] = curses.color_pair(green)
        elif self.background == "dark":
            self.colors["njobs"] = curses.color_pair(cyan)
            self.colors["queue"] = curses.color_pair(green)

            self.colors["R"] = curses.color_pair(magenta)
            self.colors["r"] = curses.color_pair(green)

            self.colors["I"] = curses.color_pair(yellow)
            self.colors["H"] = curses.color_pair(red)
            self.colors["X"] = curses.color_pair(red)
            self.colors["C"] = curses.color_pair(green)
        else:
            # this should show up on white and black backgrounds pretty well
            self.colors["njobs"] = curses.color_pair(magenta)
            self.colors["queue"] = curses.color_pair(green)

            self.colors["R"] = curses.color_pair(green)
            self.colors["r"] = curses.color_pair(cyan)

            self.colors["I"] = curses.color_pair(red)
            self.colors["H"] = curses.color_pair(red)
            self.colors["X"] = curses.color_pair(red)
            self.colors["C"] = curses.color_pair(green)


default = 1
black = 0 + 2
red = 1 + 2
green = 2 + 2
yellow = 3 + 2
blue = 4 + 2
magenta = 5 + 2
cyan = 6 + 2
white = 7 + 2

# don't have to be too careful about things like widths of fields in the
# formats since we will process the results anyway

COMMAND = """
condor_q \\
    -format '%d.' ClusterId \\
    -format '%-d,' ProcId \\
    -format '%-s,' Owner \\
    -format '%-s,' 'formatTime(QDate,"%m/%d %H:%M:%S")' \\
    -format '%-s,' 'RemoteWallClockTime' \\
    -format '%s,' ServerTime \\
    -format '%s' ShadowBday \\
    -format ',' Owner \\
    -format '%-s,' 'ifThenElse(JobStatus==0,"U",ifThenElse(JobStatus==1,"I",ifThenElse(JobStatus==2,"R",ifThenElse(JobStatus==3,"X",ifThenElse(JobStatus==4,"C",ifThenElse(JobStatus==5,"H",ifThenElse(JobStatus==6,"E",string(JobStatus))))))))' \\
    -format '%-d,' JobPrio \\
    -format '%-.2f,' MemoryUsage/1024.0 \\
    -format '%s,' Cmd \\
    -format '%s,' job_name \\
    -format '%s' RemoteHost \\
    -format '\\n' Owner"""  # noqa

#    -format '%-.1f,' ImageSize/1024.0 \\


def get_args():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-r",
        "--refresh",
        type=int,
        default=5,
        help="refresh rate in minutes.  default is 5",
    )
    parser.add_argument(
        '-m', '--match', help='only show jobs that contain the input string',
    )
    parser.add_argument(
        "-d",
        "--dark",
        action="store_true",
        help="Use a color scheme appropriate for dark backgrounds",
    )
    parser.add_argument(
        "-l",
        "--light",
        action="store_true",
        help="Use a color scheme appropriate for light backgrounds",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = get_args()
    if args.dark:
        background = "dark"
    elif args.light:
        background = "light"
    else:
        background = None

    main(refresh=args.refresh, background=background, match=args.match)
