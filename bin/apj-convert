#!/usr/bin/env python

import sys
import os
import re
import shutil

from optparse import OptionParser

import tarfile

usage="""
    %prog -a|--archive -s|epsscale yourtexfile.tex

    Converts latex document, figures, bbl into apj submission format.  ApJ
    requires the manuscript to be called ms.tex, all figures to be named
    figN.eps where N runs from 1 to the number of figures in order of
    appearance in the text.  The documentclass declaration must be
            \documentclass[12pt,preprint]{aastex}
    Other documentclass statements are commented.  \\newpage calls are also
    commented. 
    
    A subdirectory apj/ is created, and the manuscript and figures are copied
    in.  aastex.cls is also copied in if it is in the same directory as the
    manuscript; this is not required for submission but allows one to check the
    compilation for errors.
    
    Inputs statements such as \input{macros.tex} are searched for and these
    files are copied in; note if the user is using an \input{manuscript.bbl}
    command this is preserved.

    bibtex calls are commented.  If one exists, the manuscript.bbl file is
    copied in and included with an \\input statement unless this is already
    being done with an \\input call above.  The bbl file must have the same
    name as the manuscript but with extension .bbl  This file is automatically
    generated by bibtex.

    To get the figure order, the manuscript is seached for strings of the form
    {name.eps}. Anything to the right of a comment % is ignored, but comment
    blocks \\begin{comment} \end{comment} are not ignored.  
    
    The \epsscale{} inputs are removed and an overall \epsscale{1.0} is set.
    The value of epsscale can be set through the -s or --epsscale options.  
    
    If a figure has a name like *color.eps, then it is copied as fN.color.eps
    An alternative figure without color at the end of the file name is
    searched for and if it exists it is also copied in as fN.eps

    If there is a README file, it is copied.
    """

parser=OptionParser(usage)

parser.add_option("-a","--archive",action="store_true",default=False,
                  help="Store the files in a .tar.gz archive apj/yourtexfile.tar.gz.  aastex.cls is not archived.")
parser.add_option("-s","--epsscale",default='1.0',
                  help="Overall scaling for eps figures.")

# Regular expression to search for .eps lines
eps_grep = re.compile('.*\.eps.*')

dclass_grep = re.compile('.*documentclass.*')

bibstyle_grep = re.compile('.*\\\\bibliographystyle.*')
biblio_grep = re.compile('.*\\\\bibliography\{.*')
end_grep = re.compile('.*end\{document.*')

newpage_grep = re.compile('.*newpage.*')

input_grep = re.compile('.*\\\input\{.*\}')

def ExtractEpsFromString(el):
    es = el.split('}')
    file = es[0]
    return file

def ExtractEpsNamesFromLine(line):
    epsfnames = []

    ls = line.split('{')
    for el in ls:
        # Does this element have .eps in it also?
        if eps_grep.match(el):
            fname = ExtractEpsFromString(el)
            epsfnames.append(fname)

    return epsfnames

def ExtractInput(line):
    """
    Extract what is inside a \input{} statement
    """
    tl = line.split('\input{')[1]
    input = tl.split('}')[0]
    return input

def ProcessTexFile(texfname):
    """
    Convert file names to fN.eps
    Remove the use of bibtex and instead use \input{texfname.bbl}
    """

    figures = []
    inputs = []
    fig_counter = 1

    newlines = []
    for line in texfile:
        # Remove anything to the right of % comments 
        # but ignore escaped percent sign \%
        line = re.split('(?<!\\\)%',line)[0]

        # Does this line refer to a .eps file?
        if eps_grep.match(line):
            fnames = ExtractEpsNamesFromLine(line)

            # Replace the occurences of each fname with a new name
            for name in fnames:

                newname_front = 'f'+str(fig_counter)
                # color copied as fN.color.eps
                if name.find('color.eps') != -1:
                    newname = newname_front+'.color.eps'
                    newname_alt = newname_front+'.eps'
                    namealt = name.replace('-color.eps','.eps')
                    namealt = namealt.replace('_color.eps','.eps')
                else:
                    newname = newname_front+'.eps'
                    newname_alt = None
                    namealt = None

                figures.append( {'fig':name,
                                 'fig_alt': namealt,
                                 'fignew':newname,
                                 'fignew_alt': newname_alt} )


                fig_counter=fig_counter+1
                # Replace name in tex file
                line = line.replace(name,newname)

        # Comment out bibtex, documentclass, newpage commands
        if bibstyle_grep.match(line):
            line = line.replace('\\bibliographystyle{',
                                '%\\bibliographystyle{')
        if biblio_grep.match(line):
            line = line.replace('\\bibliography{','%\\bibliography{')

        if dclass_grep.match(line):
            line = line.replace('\\documentclass{','%\\documentclass{')

        if newpage_grep.match(line):
            line = line.replace('\\newpage','%\\newpage')

        # check for input calls
        if input_grep.match(line):
            input = ExtractInput(line)
            inputs.append(input)

        # figure* can mess things up in preprint mode
        line = line.replace('figure*','figure')
        # deluxetable* doesn't seem to exist in standard aastex
        line = line.replace('deluxetable*','deluxetable')
        # [ptb] seems to work best in preprint mode
        line = re.sub('{figure}\[.*\]','{figure}[ptb]',line)
        # Remove epsscale calls.  We will replace it with an overall scaling
        # which seems to work better.
        line = re.sub('\\\epsscale\{.*?\}','',line)

        newlines.append(line)

    return newlines, figures, inputs


options, args = parser.parse_args(sys.argv[1:])
epsscale=options.epsscale

if len(args) < 1:
    parser.print_help()
    sys.exit(45)

texfname=args[0]

dir=os.path.dirname(texfname)

apjdir = os.path.join(dir,'apj')

if not os.path.exists(apjdir):
    try:
        os.mkdir(apjdir)
    except OSError:
        sys.stderr.write('Could not create apj dir: %s\n' % apjdir)
        sys.exit(45)

texfile = open(texfname, 'r')

newlines, figures, inputs = ProcessTexFile(texfile)

ofname = os.path.join(apjdir,'ms.tex')
ofile = open(ofname,'w')



# Copy figures, including alternates for color figures
for fig in figures:
    fold = fig['fig']
    fnew = os.path.join(apjdir,fig['fignew'])
    sys.stdout.write("%s  -->  %s\n" % (fold,fnew))
    shutil.copyfile(fold,fnew)


    fnew_alt = fig['fignew_alt']
    if fnew_alt is not None:
        fold_alt = fig['fig_alt']
        fnew_alt = os.path.join(apjdir,fnew_alt)
        sys.stdout.write('   ALT: %s  -->  %s\n' % (fold_alt,fnew_alt))
        shutil.copyfile(fold_alt,fnew_alt)

for input in inputs:
    fname = os.path.join(dir, input)
    sys.stdout.write('Copying: %s\n' % input)
    shutil.copy(fname, apjdir)

# Copy bibtex file if it exists.  
bibfile = texfname.replace('.tex','.bbl')
bibbase = os.path.basename(bibfile)
newbib = os.path.join(apjdir, bibbase)
if os.path.exists(bibfile) and not os.path.exists(newbib):
    sys.stdout.write('Copying: %s\n' % bibbase)
    shutil.copy(bibfile, apjdir)

# aastex just so we can check compilation
aasname = os.path.join(dir, 'aastex.cls')
if os.path.exists(aasname):
    sys.stdout.write('Copying: %s\n' % aasname)
    shutil.copy(aasname,apjdir)

# Copy a README if it exists
readme = os.path.join(dir, 'README')
if os.path.exists(readme):
    sys.stdout.write('Copying: %s\n' % readme)
    shutil.copy(readme,apjdir)

# Write new file
ofile.write('\documentclass[12pt,preprint]{aastex}\n')
#ofile.write('\epsscale{0.7}\n')
ofile.write('\epsscale{'+epsscale+'}\n')
for line in newlines:
    if end_grep.match(line) and os.path.exists(bibfile):
        # Add an input statement for bib file
        # Only do this if not already input above
        if bibbase not in inputs:
            ofile.write('\input{'+bibbase+'}\n\n')
    ofile.write(line)

ofile.close()

# Make a tar.gz archive in apj/ if requested
if options.archive:

    tarfname = os.path.basename(texfname)
    tarfname = tarfname.replace('.tex','.tar.gz')
    tarfname = os.path.join(apjdir, tarfname)
    archive = tarfile.open(tarfname, 'w:gz')

    sys.stdout.write('Archiving to: %s\n' % tarfname)
    files = os.listdir(apjdir)
    for f in files:
        # Add file but only extract as the basename f
        if f != 'aastex.cls':
            archive.add(os.path.join(apjdir,f), f)
    archive.close()
