#!/usr/bin/env python
"""
        dfall [options]

Run df on all /data disks on the astro cluster.  Return the results
sorted and show totals for the entire system."""

import os
import sys
from optparse import OptionParser

parser=OptionParser(__doc__)

parser.add_option("-s","--sortby",default="avail", dest="sortby",
    help="Specify the sort ordering.  Default is '%default'.  Possibilities are 'size','used','avail','perc','name'. The secondary sort is by name, e.g. avail-name")


#
# Some data
#

NMACHINE=34
# How to perform the sorting
sortmap = {'size':  {'sortf': lambda d: '%010d-%s' % (d['size'],d['machine']), 'reverse':False},
           'used':  {'sortf': lambda d: '%010d-%s' % (d['used'],d['machine']), 'reverse':False},
           'avail': {'sortf': lambda d: '%010d-%s' % (d['avail'],d['machine']), 'reverse':False},
           'perc':  {'sortf': lambda d: '%010d-%s' % (d['percnum'],d['machine']), 'reverse':False},
           'name':  {'sortf': lambda d: d['machine'], 'reverse':False}}



sort_reverse = \
        {'size':True,'used':True,'avail':True,'perc':False,'name':False}

def size2rep(size):
    """
    Decide whether or not to include a decimal place
    """
    if size >= 10:
        return '%d' % size
    else:
        return '%0.1f' % size

def get_human_rep(size):
    # not following df here, where only T seems to use 1000
    tsize=size/1000./1000./1000.
    gsize=size/1000./1000.
    msize=size/1000.
    ksize=size
    if tsize >= 1.0:
        rep=size2rep(tsize)
        rep += 'T'
    elif gsize >= 1.0:
        rep=size2rep(gsize)
        rep += 'G'
    elif msize >= 1.0:
        rep=size2rep(msize)
        rep += 'M'
    else:
        rep='%dK' % ksize

    return rep


def dfall():

    dflist=[]
    for i in xrange(1,NMACHINE+1):

        machine = 'astro%04d' % i
        command='ssh %s "df /data | grep data"' % machine
        si,so=os.popen2(command)
        df=so.read().strip()
        if df == '':
            print 'Could not get df for machine %s' % machine
        else:
            dfd = {}
            df=df.split()
            dfd['machine'] = machine
            dfd['filesystem'] = '%s:/data' % machine
            dfd['size']    = int(df[1])
            dfd['size_human']  = get_human_rep(dfd['size'])
            dfd['used']    = int(df[2])
            dfd['used_human']  = get_human_rep(dfd['used'])
            dfd['avail']   = int(df[3])
            dfd['avail_human']  = get_human_rep(dfd['avail'])
            dfd['perc']    = df[4]

            dfd['percnum'] = int( dfd['perc'].replace('%','') )

            dflist.append(dfd)
    return dflist


def print_dfall(dflist, sortby):
    from operator import itemgetter

    print 'Filesystem            Size  Used Avail Use%'

    fmt='%-21s %4s  %4s %5s %4s'

    size_tot=0
    used_tot=0
    avail_tot=0

    #for d in dflist:
    for d in sorted(dflist, reverse=sortmap[sortby]['reverse'], 
                    key=sortmap[sortby]['sortf']):
        print fmt % (d['filesystem'],
                     d['size_human'],
                     d['used_human'],
                     d['avail_human'],
                     d['perc'])

        size_tot += d['size']
        used_tot += d['used']
        avail_tot += d['avail']

    size_tot_human = get_human_rep(size_tot)
    used_tot_human = get_human_rep(used_tot)
    avail_tot_human = get_human_rep(avail_tot)
    use_perc_tot = int(used_tot/float(size_tot)*100.)
    use_perc_tot_human = '%3s%%' % use_perc_tot

    print '-'*43
    print fmt % ('totals',
                 size_tot_human,
                 used_tot_human,
                 avail_tot_human,
                 use_perc_tot_human)



def make_key(tdict, sortby):
    key = '%010s-%s' % (tdict[sortby], tdict['name'])
    return key


def main():

    options, args = parser.parse_args(sys.argv[1:])

    if options.sortby not in sort_reverse:
        print "Bad SORTBY specification:",options.sortby
        sys.exit(45)

    dflist = dfall()
    print_dfall(dflist, options.sortby)


# run the main program
main()
