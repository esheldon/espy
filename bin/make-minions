#!/usr/bin/env python
"""
    %prog [options] job_list minutes_per nodes ppn

Description
    Create a minions pbs script to run the commands in the specified file.

    minutes_per is the minutes per command. Make sure to pad it if needed!

    The output pbs file will be named job_list.pbs, and the pbslog will
    go to job_list.pbs.pbslog
"""

import sys
import os

from optparse import OptionParser
parser=OptionParser(__doc__)
parser.add_option('-n','--job-name',default='minions',
                  help=("pbs job name"))
parser.add_option('--account',default='des',
                  help=("account to charge"))
   


_template="""#!/bin/bash
#PBS -q regular
#PBS -l nodes={nodes}:ppn={ppn}
#PBS -l walltime={wall_time}
#PBS -N {job_name}
#PBS -j oe
#PBS -o {pbs_log}
#PBS -V
#PBS -A {account}

if [[ "${{PBS_O_WORKDIR}}Y" != "Y" ]];
    echo changing to directory: $PBS_O_WORKDIR
    cd $PBS_O_WORKDIR
fi

nsetup_ess

module load openmpi-gnu

job_list="{job_list}"
mpirun -np {n_cores} minions < "$job_list"
"""

def get_nlines(fname):
    with open(fname) as fobj:
        nl = len( fobj.readlines() )
    return nl

def get_wall_time(n_jobs, worker_cores, minutes_per):

    # subtract 1 for the master
    if worker_cores > n_jobs:
        mess='WARNING: you have specified more worker cores (%d) than jobs (%d)'
        print mess % (worker_cores, n_jobs)

    wall_time_minutes = n_jobs*minutes_per/worker_cores

    if wall_time_minutes < minutes_per:
        # even if we have too many cores, it will still take at least
        # minutes per time!
        wall_time_minutes = minutes_per
    
    if wall_time_minutes > 60.0:
        wall_time_hours_f = wall_time_minutes/60.0
        wall_time_hours=int(wall_time_hours_f)
        wall_time_minutes = int(wall_time_minutes - wall_time_hours*60)
    else:
        wall_time_hours=0

    wall_time = '%d:%02d:00' % (wall_time_hours,wall_time_minutes)
    return wall_time

def main():
    options, args = parser.parse_args(sys.argv[1:])

    if len(args) < 4:
        parser.print_help()
        sys.exit(45)

    job_list=args[0]
    minutes_per=float(args[1])
    nodes=int(args[2])
    ppn=int(args[3])
    n_cores=nodes*ppn
    worker_cores=n_cores-1

    pbs_file=os.path.basename(job_list)+'.pbs'
    pbs_log=pbs_file+'.pbslog'


    n_jobs = get_nlines(job_list)
    wall_time=get_wall_time(n_jobs, worker_cores, minutes_per)

    text=_template.format(nodes=nodes,
                          ppn=ppn,
                          wall_time=wall_time,
                          job_name=options.job_name,
                          pbs_log=pbs_log,
                          account=options.account,
                          job_list=job_list,
                          n_cores=n_cores)

    print text
    
    with open(pbs_file,'w') as fobj:
        fobj.write(text)
    print 'output is in:',pbs_file

main()
