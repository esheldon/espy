#!/usr/bin/env python
"""
    %prog [options] run

Geneate the wq files
"""
from __future__ import print_function
import os,sys
from sys import stderr

import great_des
from great_des import files

from optparse import OptionParser
parser = OptionParser(__doc__)

template="""
command: |
    source ~/.bashrc
    module unload espy && module load espy/work

    $ESPY_DIR/great_des/bin/combine-great-des %(run)s %(gnum)s

mode: bynode
job_name: "%(job_name)s"
"""


class WQMaker(object):
    def __init__(self, run):
        self.run=run
        self.config=files.read_config(run=run)

    def make_wq(self):
        self.make_output_dirs()

        ng=self.config['ng']
        for gnum in xrange(ng):
            text=self.get_text(gnum)
            fname=files.get_collate_wq_file(run=self.run, gnum=gnum)
            print("writing:",fname)
            with open(fname,'w') as fobj:
                fobj.write(text)

    def get_text(self, gnum):
        job_name=self.get_job_name(gnum)
        text=template % {'run':self.run,
                         'gnum':gnum,
                         'job_name':job_name}
        return text

    def get_job_name(self, gnum):
        job_name='combine-%s-%s' % (self.run, gnum)
        return job_name

    def make_output_dirs(self):
        wq_dir=files.get_wq_dir(run=self.run)
        collated_dir = files.get_collated_dir(run=self.run)

        for dir in [wq_dir,collated_dir]:
            if not os.path.exists( dir ):
                print('making dir:',dir)
                os.makedirs(dir)

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    wqm = WQMaker(run)
    wqm.make_wq()

main()
